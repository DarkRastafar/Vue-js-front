{"ast":null,"code":"import _asyncToGenerator from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport App from './App.vue';\nimport router from './router';\nimport \"@/assets/css/table.css\";\nimport vSelect from \"vue-select\";\nimport \"vue-select/dist/vue-select.css\";\nimport SetWorkStatus from '@/assets/set_work_status.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nimport { SetValuesDiapasonInput } from '@/assets/setDiapasonToOperator.js';\nvar store = createStore({\n  actions: {\n    websocketConnect: function websocketConnect(ctx) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var username, class_model, url, connect_server;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connect_server = function _connect_server() {\n                  var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                  var url = \"ws://localhost:8000/ws/chat/\".concat(username, \"/\");\n                  console.log('Starting connection to WebSocket Server');\n                  this.connection = new WebSocket(url);\n                };\n\n                username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                class_model = localStorage.getItem('user_class_model');\n                url = \"ws://localhost:8000/ws/chat/\".concat(username, \"_\").concat(class_model, \"/\"); // var url = `ws://localhost:8000/ws/chat/${username}/`\n\n                console.log('Starting connection to WebSocket Server');\n                _this.connection = new WebSocket(url);\n                test_connection = _this.connection;\n                localStorage.setItem('test_connection');\n\n                _this.connection.onmessage = function (event) {\n                  var messageCatch = JSON.parse(event.data);\n\n                  if (JSON.parse(messageCatch.message).username_id !== undefined) {\n                    var operator_id = JSON.parse(messageCatch.message).username_id;\n                    document.cookie = \"username_id=\".concat(operator_id, \"; secure\");\n                    var InstanceSetWorkStatus = new SetWorkStatus(messageCatch);\n                    InstanceSetWorkStatus.setStatus();\n                    var InstanceSetBankButton = new SetBankButton();\n                    InstanceSetBankButton.setButtonStatus(messageCatch);\n                    var InstanceSetClientsModelButton = new SetClientsModelButton();\n                    InstanceSetClientsModelButton.setButtonStatus();\n                    var InstanceSetValuesDiapasonInput = new SetValuesDiapasonInput(messageCatch);\n                    InstanceSetValuesDiapasonInput.set();\n                  } else {\n                    var tableHeadersMessage = JSON.parse(messageCatch.message).headers;\n                    var tableBodyMessage = JSON.parse(messageCatch.message).body; // const dropDownCommentsMessage = JSON.parse(messageCatch.message).dropdown_comment\n                    // const dropDownCityAlfabank = JSON.parse(messageCatch.message).dropdown_city\n\n                    ctx.commit('updateHeaders', tableHeadersMessage);\n                    ctx.commit('updateClients', tableBodyMessage); // ctx.commit('updateDropDownCommentsArray', dropDownCommentsMessage)\n                    // ctx.commit('updateDropDownCityAlfabank', dropDownCityAlfabank)\n                  }\n                };\n\n                _this.connection.onopen = function (event) {\n                  console.log('Successfully connected to first channel websocket'); // let model_class = localStorage.getItem('user_class_model')\n                  // this.send(model_class)\n                };\n\n                _this.connection.onclose = function (event) {\n                  console.log('Disconnect! Start connection');\n\n                  for (var i = 0; i < 3; i++) {\n                    setTimeout(function timer() {\n                      var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                      var url = \"ws://localhost:8000/ws/chat/\".concat(username, \"/\");\n                      console.log('Starting connection to WebSocket Server');\n                      this.connection = new WebSocket(url);\n                    }, i * 3000);\n                  }\n\n                  location.reload();\n                };\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  },\n  mutations: {\n    updateHeaders: function updateHeaders(state, tableHeadersMessage) {\n      state.tableHeadersArray = tableHeadersMessage;\n    },\n    updateClients: function updateClients(state, tableBodyMessage) {\n      console.log(state.tableBodyArray);\n      state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\n        if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\n          return 1;\n        }\n\n        if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\n          return -1;\n        }\n\n        return 0;\n      });\n      console.log(state.tableBodyArray);\n    },\n    updateDropDownCommentsArray: function updateDropDownCommentsArray(state, dropDownCommentsMessage) {\n      state.dropDownCommentsArray = dropDownCommentsMessage;\n    },\n    updateDropDownCityAlfabank: function updateDropDownCityAlfabank(state, dropDownCityAlfabank) {\n      state.dropDownCityAlfabank = dropDownCityAlfabank;\n    }\n  },\n  state: {\n    tableHeadersArray: [],\n    tableBodyArray: [],\n    dropDownCommentsArray: [],\n    dropDownCityAlfabank: []\n  },\n  getters: {\n    allHeaders: function allHeaders(state) {\n      return state.tableHeadersArray;\n    },\n    allClients: function allClients(state) {\n      return state.tableBodyArray;\n    },\n    allDropDownComments: function allDropDownComments(state) {\n      return state.dropDownCommentsArray;\n    },\n    allDropDownCityAlfabank: function allDropDownCityAlfabank(state) {\n      return state.dropDownCityAlfabank;\n    }\n  },\n  modules: {}\n});\nvar app = createApp(App);\napp.use(vSelect);\napp.use(store);\napp.use(router);\napp.mount('#app');\nexport default test_connection;","map":{"version":3,"sources":["C:/current_front/src/main.js"],"names":["createApp","createStore","GetUsernameFromCoockies","App","router","vSelect","SetWorkStatus","SetBankButton","SetClientsModelButton","SetValuesDiapasonInput","store","actions","websocketConnect","ctx","connect_server","username","document","cookie","findUsernameString","url","console","log","connection","WebSocket","class_model","localStorage","getItem","test_connection","setItem","onmessage","event","messageCatch","JSON","parse","data","message","username_id","undefined","operator_id","InstanceSetWorkStatus","setStatus","InstanceSetBankButton","setButtonStatus","InstanceSetClientsModelButton","InstanceSetValuesDiapasonInput","set","tableHeadersMessage","headers","tableBodyMessage","body","commit","onopen","onclose","i","setTimeout","timer","location","reload","mutations","updateHeaders","state","tableHeadersArray","updateClients","tableBodyArray","sort","a","b","parseFloat","scoring_time","updateDropDownCommentsArray","dropDownCommentsMessage","dropDownCommentsArray","updateDropDownCityAlfabank","dropDownCityAlfabank","getters","allHeaders","allClients","allDropDownComments","allDropDownCityAlfabank","modules","app","use","mount"],"mappings":";;;;;;;;AAAA,SAASA,SAAT,QAA0B,KAA1B;AACA,SAASC,WAAT,QAA4B,MAA5B;AACA,SAASC,uBAAT,QAAwC,uCAAxC;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAO,wBAAP;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAO,gCAAP;AAEA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AACA,SAASC,sBAAT,QAAuC,mCAAvC;AAEA,IAAMC,KAAK,GAAGT,WAAW,CAAC;AACtBU,EAAAA,OAAO,EAAE;AACCC,IAAAA,gBADD,4BACkBC,GADlB,EACuB;AAAA;;AAAA;AAAA,wCAqDfC,cArDe;AAAA;AAAA;AAAA;AAAA;AAqDfA,gBAAAA,cArDe,8BAqDE;AACtB,sBAAIC,QAAQ,GAAG,IAAIb,uBAAJ,CAA4Bc,QAAQ,CAACC,MAArC,EAA6CC,kBAA7C,EAAf;AACA,sBAAIC,GAAG,yCAAkCJ,QAAlC,MAAP;AACAK,kBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,uBAAKC,UAAL,GAAkB,IAAIC,SAAJ,CAAcJ,GAAd,CAAlB;AACH,iBA1DuB;;AACpBJ,gBAAAA,QADoB,GACT,IAAIb,uBAAJ,CAA4Bc,QAAQ,CAACC,MAArC,EAA6CC,kBAA7C,EADS;AAEpBM,gBAAAA,WAFoB,GAENC,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAFM;AAInBP,gBAAAA,GAJmB,yCAIkBJ,QAJlB,cAI8BS,WAJ9B,QAMxB;;AACAJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,gBAAA,KAAI,CAACC,UAAL,GAAkB,IAAIC,SAAJ,CAAcJ,GAAd,CAAlB;AACAQ,gBAAAA,eAAe,GAAG,KAAI,CAACL,UAAvB;AACAG,gBAAAA,YAAY,CAACG,OAAb,CAAqB,iBAArB;;AAEA,gBAAA,KAAI,CAACN,UAAL,CAAgBO,SAAhB,GAA4B,UAAUC,KAAV,EAAiB;AACzC,sBAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAnB;;AAGA,sBAAIF,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACI,OAAxB,EAAiCC,WAAjC,KAAiDC,SAArD,EAAgE;AAC5D,wBAAMC,WAAW,GAAGN,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACI,OAAxB,EAAiCC,WAArD;AAEApB,oBAAAA,QAAQ,CAACC,MAAT,yBAAiCqB,WAAjC;AAEA,wBAAMC,qBAAqB,GAAG,IAAIjC,aAAJ,CAAkByB,YAAlB,CAA9B;AACAQ,oBAAAA,qBAAqB,CAACC,SAAtB;AAEA,wBAAMC,qBAAqB,GAAG,IAAIlC,aAAJ,EAA9B;AACAkC,oBAAAA,qBAAqB,CAACC,eAAtB,CAAsCX,YAAtC;AAEA,wBAAMY,6BAA6B,GAAG,IAAInC,qBAAJ,EAAtC;AACAmC,oBAAAA,6BAA6B,CAACD,eAA9B;AAEA,wBAAME,8BAA8B,GAAG,IAAInC,sBAAJ,CAA2BsB,YAA3B,CAAvC;AACAa,oBAAAA,8BAA8B,CAACC,GAA/B;AACH,mBAhBD,MAiBK;AACD,wBAAMC,mBAAmB,GAAGd,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACI,OAAxB,EAAiCY,OAA7D;AACA,wBAAMC,gBAAgB,GAAGhB,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACI,OAAxB,EAAiCc,IAA1D,CAFC,CAGD;AACA;;AAGApC,oBAAAA,GAAG,CAACqC,MAAJ,CAAW,eAAX,EAA4BJ,mBAA5B;AACAjC,oBAAAA,GAAG,CAACqC,MAAJ,CAAW,eAAX,EAA4BF,gBAA5B,EARC,CASD;AACA;AACH;AACJ,iBAjCD;;AAmCA,gBAAA,KAAI,CAAC1B,UAAL,CAAgB6B,MAAhB,GAAyB,UAAUrB,KAAV,EAAiB;AACtCV,kBAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ,EADsC,CAEtC;AACA;AACC,iBAJL;;AAaA,gBAAA,KAAI,CAACC,UAAL,CAAgB8B,OAAhB,GAA0B,UAAUtB,KAAV,EAAiB;AACvCV,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AACA,uBAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBC,oBAAAA,UAAU,CAAE,SAASC,KAAT,GAAgB;AACxB,0BAAIxC,QAAQ,GAAG,IAAIb,uBAAJ,CAA4Bc,QAAQ,CAACC,MAArC,EAA6CC,kBAA7C,EAAf;AACA,0BAAIC,GAAG,yCAAkCJ,QAAlC,MAAP;AACAK,sBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,2BAAKC,UAAL,GAAkB,IAAIC,SAAJ,CAAcJ,GAAd,CAAlB;AACH,qBALS,EAKPkC,CAAC,GAAC,IALK,CAAV;AAMH;;AACDG,kBAAAA,QAAQ,CAACC,MAAT;AACH,iBAXD;;AA5DwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwE3B;AAzEI,GADa;AA4EtBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,aADO,yBACQC,KADR,EACed,mBADf,EACoC;AACvCc,MAAAA,KAAK,CAACC,iBAAN,GAA0Bf,mBAA1B;AACH,KAHM;AAIPgB,IAAAA,aAJO,yBAIQF,KAJR,EAIeZ,gBAJf,EAIiC;AACpC5B,MAAAA,OAAO,CAACC,GAAR,CAAYuC,KAAK,CAACG,cAAlB;AAEAH,MAAAA,KAAK,CAACG,cAAN,GAAuBf,gBAAgB,CAACgB,IAAjB,CAAsB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACzD,YAAIC,UAAU,CAACF,CAAC,CAACG,YAAH,CAAV,GAA6BD,UAAU,CAACD,CAAC,CAACE,YAAH,CAA3C,EAA6D;AACzD,iBAAO,CAAP;AACD;;AACD,YAAID,UAAU,CAACF,CAAC,CAACG,YAAH,CAAV,GAA6BD,UAAU,CAACD,CAAC,CAACE,YAAH,CAA3C,EAA6D;AAC3D,iBAAO,CAAC,CAAR;AACD;;AACD,eAAO,CAAP;AACL,OARsB,CAAvB;AAUAhD,MAAAA,OAAO,CAACC,GAAR,CAAYuC,KAAK,CAACG,cAAlB;AACH,KAlBM;AAmBPM,IAAAA,2BAnBO,uCAmBsBT,KAnBtB,EAmB6BU,uBAnB7B,EAmBsD;AACzDV,MAAAA,KAAK,CAACW,qBAAN,GAA8BD,uBAA9B;AACH,KArBM;AAsBPE,IAAAA,0BAtBO,sCAsBqBZ,KAtBrB,EAsB4Ba,oBAtB5B,EAsBkD;AACrDb,MAAAA,KAAK,CAACa,oBAAN,GAA6BA,oBAA7B;AACH;AAxBM,GA5EW;AAsGtBb,EAAAA,KAAK,EAAE;AACHC,IAAAA,iBAAiB,EAAE,EADhB;AAEHE,IAAAA,cAAc,EAAE,EAFb;AAGHQ,IAAAA,qBAAqB,EAAE,EAHpB;AAIHE,IAAAA,oBAAoB,EAAE;AAJnB,GAtGe;AA4GtBC,EAAAA,OAAO,EAAE;AACLC,IAAAA,UADK,sBACMf,KADN,EACa;AACd,aAAOA,KAAK,CAACC,iBAAb;AACH,KAHI;AAILe,IAAAA,UAJK,sBAIMhB,KAJN,EAIa;AACd,aAAOA,KAAK,CAACG,cAAb;AACH,KANI;AAOLc,IAAAA,mBAPK,+BAOejB,KAPf,EAOsB;AACvB,aAAOA,KAAK,CAACW,qBAAb;AACH,KATI;AAULO,IAAAA,uBAVK,mCAUmBlB,KAVnB,EAUyB;AAC1B,aAAOA,KAAK,CAACa,oBAAb;AACH;AAZI,GA5Ga;AA0HtBM,EAAAA,OAAO,EAAE;AA1Ha,CAAD,CAAzB;AA6HA,IAAMC,GAAG,GAAGhF,SAAS,CAACG,GAAD,CAArB;AACA6E,GAAG,CAACC,GAAJ,CAAQ5E,OAAR;AACA2E,GAAG,CAACC,GAAJ,CAAQvE,KAAR;AACAsE,GAAG,CAACC,GAAJ,CAAQ7E,MAAR;AACA4E,GAAG,CAACE,KAAJ,CAAU,MAAV;AAEA,eAAevD,eAAf","sourcesContent":["import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport \"@/assets/css/table.css\"\r\nimport vSelect from \"vue-select\";\r\nimport \"vue-select/dist/vue-select.css\";\r\n\r\nimport SetWorkStatus from '@/assets/set_work_status.js'\r\nimport SetBankButton from '@/assets/set_bank_button.js'\r\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\r\nimport { SetValuesDiapasonInput } from '@/assets/setDiapasonToOperator.js'\r\n\r\nconst store = createStore({\r\n    actions: {\r\n        async websocketConnect(ctx) {\r\n            let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n            let class_model = localStorage.getItem('user_class_model')\r\n            \r\n             var url = `ws://localhost:8000/ws/chat/${username}_${class_model}/`\r\n\r\n            // var url = `ws://localhost:8000/ws/chat/${username}/`\r\n            console.log('Starting connection to WebSocket Server')\r\n            this.connection = new WebSocket(url)\r\n            test_connection = this.connection\r\n            localStorage.setItem('test_connection')\r\n\r\n            this.connection.onmessage = function (event) {\r\n                var messageCatch = JSON.parse(event.data)\r\n                \r\n                \r\n                if (JSON.parse(messageCatch.message).username_id !== undefined) {\r\n                    const operator_id = JSON.parse(messageCatch.message).username_id\r\n\r\n                    document.cookie = `username_id=${operator_id}; secure`\r\n\r\n                    const InstanceSetWorkStatus = new SetWorkStatus(messageCatch)\r\n                    InstanceSetWorkStatus.setStatus()\r\n\r\n                    const InstanceSetBankButton = new SetBankButton()\r\n                    InstanceSetBankButton.setButtonStatus(messageCatch)\r\n\r\n                    const InstanceSetClientsModelButton = new SetClientsModelButton()\r\n                    InstanceSetClientsModelButton.setButtonStatus()\r\n\r\n                    const InstanceSetValuesDiapasonInput = new SetValuesDiapasonInput(messageCatch)\r\n                    InstanceSetValuesDiapasonInput.set()\r\n                }\r\n                else {\r\n                    const tableHeadersMessage = JSON.parse(messageCatch.message).headers\r\n                    const tableBodyMessage = JSON.parse(messageCatch.message).body\r\n                    // const dropDownCommentsMessage = JSON.parse(messageCatch.message).dropdown_comment\r\n                    // const dropDownCityAlfabank = JSON.parse(messageCatch.message).dropdown_city\r\n        \r\n\r\n                    ctx.commit('updateHeaders', tableHeadersMessage)\r\n                    ctx.commit('updateClients', tableBodyMessage)\r\n                    // ctx.commit('updateDropDownCommentsArray', dropDownCommentsMessage)\r\n                    // ctx.commit('updateDropDownCityAlfabank', dropDownCityAlfabank)\r\n                }                \r\n            }\r\n            \r\n            this.connection.onopen = function (event) {\r\n                console.log('Successfully connected to first channel websocket')\r\n                // let model_class = localStorage.getItem('user_class_model')\r\n                // this.send(model_class)\r\n                }\r\n            \r\n            function connect_server() {\r\n                let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                var url = `ws://localhost:8000/ws/chat/${username}/`\r\n                console.log('Starting connection to WebSocket Server')\r\n                this.connection = new WebSocket(url);\r\n            }\r\n\r\n            this.connection.onclose = function (event) {\r\n                console.log('Disconnect! Start connection')\r\n                for (var i = 0; i < 3; i++) {\r\n                    setTimeout( function timer(){\r\n                        let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                        var url = `ws://localhost:8000/ws/chat/${username}/`\r\n                        console.log('Starting connection to WebSocket Server')\r\n                        this.connection = new WebSocket(url);\r\n                    }, i*3000 );\r\n                }\r\n                location.reload()\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        updateHeaders (state, tableHeadersMessage) {\r\n            state.tableHeadersArray = tableHeadersMessage\r\n        },\r\n        updateClients (state, tableBodyMessage) {\r\n            console.log(state.tableBodyArray)\r\n\r\n            state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\r\n                if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\r\n                    return 1;\r\n                  }\r\n                  if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\r\n                    return -1;\r\n                  }\r\n                  return 0;\r\n            })\r\n\r\n            console.log(state.tableBodyArray)\r\n        },\r\n        updateDropDownCommentsArray (state, dropDownCommentsMessage) {\r\n            state.dropDownCommentsArray = dropDownCommentsMessage\r\n        },\r\n        updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\r\n            state.dropDownCityAlfabank = dropDownCityAlfabank\r\n        }\r\n    },\r\n    state: {\r\n        tableHeadersArray: [],\r\n        tableBodyArray: [],\r\n        dropDownCommentsArray: [],\r\n        dropDownCityAlfabank: [],\r\n    },\r\n    getters: {\r\n        allHeaders(state) {\r\n            return state.tableHeadersArray\r\n        },\r\n        allClients(state) {\r\n            return state.tableBodyArray\r\n        },\r\n        allDropDownComments(state) {\r\n            return state.dropDownCommentsArray\r\n        },\r\n        allDropDownCityAlfabank(state){\r\n            return state.dropDownCityAlfabank\r\n        }\r\n    },\r\n    modules: {}\r\n})\r\n\r\nconst app = createApp(App);\r\napp.use(vSelect)\r\napp.use(store)\r\napp.use(router)\r\napp.mount('#app')\r\n\r\nexport default test_connection;"]},"metadata":{},"sourceType":"module"}