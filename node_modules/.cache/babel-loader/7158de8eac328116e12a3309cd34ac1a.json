{"ast":null,"code":"import _defineProperty from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _name$data$components;\n\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport bankes from '@/components/bankes.vue';\nimport rangeFilter from '@/components/rangeFilter.vue';\nimport vNotification from '@/components/v-notification.vue';\nimport { mapGetters, mapActions } from 'vuex';\nimport Paginate from \"vuejs-paginate-next\";\nimport RangeFilterClients from '@/assets/rangeFilterDiapason.js';\nimport { GetData } from '@/assets/FetchRequest.js';\nimport { BodyStore, PaginatonStore } from '@/assets/updateStore.js';\nimport { FetchClient, FetchStatistics } from '@/assets/sendEntryesOnServer.js';\nexport default (_name$data$components = {\n  name: 'bodyTable',\n  data: function data() {\n    return {\n      clientsPerPage: 2,\n      pageNumber: 1,\n      messages: []\n    };\n  },\n  components: {\n    bankes: bankes,\n    Paginate: Paginate,\n    rangeFilter: rangeFilter,\n    vNotification: vNotification\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"firstTableHeaders\", \"secondTableHeaders\", \"thirdTableHeaders\", \"tableBody\", \"additionalComments\", \"clientsTypeForOperators\", \"statisticsData\", \"paginateData\", \"clientsPerPageData\"])), {}, {\n    howClients: function howClients() {\n      return this.tableBody.length;\n    },\n    pages: function pages() {\n      return Math.ceil(this.paginateData / this.clientsPerPageData);\n    },\n    modelType: function modelType() {\n      return localStorage.getItem('user_class_model');\n    }\n  }),\n  methods: mapActions(['websocketConnect', 'setVariablesFromLocalStorage', 'getDataDRF'])\n}, _defineProperty(_name$data$components, \"methods\", {\n  UpdateScrollHeight: function UpdateScrollHeight(event) {\n    var currentTextareaField = document.getElementById(event.target.id);\n    currentTextareaField.style.cssText = \"height: \".concat((currentTextareaField, currentTextareaField.scrollHeight), \"px; overflow-y: hidden\");\n  },\n  clickPage: function clickPage(page) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var GetDataInstance, data, BodyStoreInstance, PaginatonStoreInstance;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(page !== '...')) {\n                _context.next = 11;\n                break;\n              }\n\n              _this.pageNumber = page;\n              localStorage.setItem('currentPage', page);\n              GetDataInstance = new GetData(_this.clientsPerPageData);\n              _context.next = 6;\n              return GetDataInstance.returnSlice();\n\n            case 6:\n              data = _context.sent;\n              BodyStoreInstance = new BodyStore(_this.$store, data);\n              BodyStoreInstance.update();\n              PaginatonStoreInstance = new PaginatonStore(_this.$store, data);\n              PaginatonStoreInstance.update();\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  rangeFilterClients: function rangeFilterClients(event) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var RangeFilterClientsInstance, GetDataInstance, data, BodyStoreInstance, PaginatonStoreInstance;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              RangeFilterClientsInstance = new RangeFilterClients(event, _this2.$store);\n              RangeFilterClientsInstance.updateStoreTableBody(_this2.tableBody);\n              GetDataInstance = new GetData(_this2.clientsPerPageData);\n              _context2.next = 5;\n              return GetDataInstance.returnSlice();\n\n            case 5:\n              data = _context2.sent;\n              BodyStoreInstance = new BodyStore(_this2.$store, data);\n              BodyStoreInstance.update();\n              PaginatonStoreInstance = new PaginatonStore(_this2.$store, data);\n              PaginatonStoreInstance.update();\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  SendOnStatistic: function SendOnStatistic(event) {\n    // function callback (data) {\n    //     data.then(responseData => {\n    //       let clientId = (event.target.id).replace('sendButton', '')\n    //       this.messages.unshift({name: `Клиент с ${clientId} ID - успешно сохранен`, id: clientId})\n    //     })\n    // }\n    var FetchClientInstance = new FetchClient(event);\n    FetchClientInstance.send();\n    var FetchStatisticsInstance = new FetchStatistics(event);\n    FetchStatisticsInstance.send();\n    var clientId = event.target.id.replace('sendButton', '');\n    this.messages.unshift({\n      name: \"\\u041A\\u043B\\u0438\\u0435\\u043D\\u0442 \\u0441 \".concat(clientId, \" ID - \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\"),\n      id: clientId\n    });\n  },\n  returnStrippedPhone: function returnStrippedPhone(phone_str) {\n    return phone_str.replace('=', '');\n  }\n}), _defineProperty(_name$data$components, \"mounted\", function mounted() {\n  var _this3 = this;\n\n  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _this3.$store.dispatch('setVariablesFromLocalStorage');\n\n            _this3.$store.dispatch('getDataDRF');\n\n            _this3.$store.dispatch('websocketConnect');\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }))();\n}), _name$data$components);","map":{"version":3,"mappings":"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","names":["bankes","rangeFilter","vNotification","mapGetters","mapActions","Paginate","RangeFilterClients","GetData","BodyStore","PaginatonStore","FetchClient","FetchStatistics","name","data","clientsPerPage","pageNumber","messages","components","computed","howClients","tableBody","length","pages","Math","ceil","paginateData","clientsPerPageData","modelType","localStorage","getItem","methods","UpdateScrollHeight","event","currentTextareaField","document","getElementById","target","id","style","cssText","scrollHeight","clickPage","page","setItem","GetDataInstance","returnSlice","BodyStoreInstance","$store","update","PaginatonStoreInstance","rangeFilterClients","RangeFilterClientsInstance","updateStoreTableBody","SendOnStatistic","FetchClientInstance","send","FetchStatisticsInstance","clientId","replace","unshift","returnStrippedPhone","phone_str","dispatch"],"sourceRoot":"","sources":["C:\\current_front\\src\\components\\BodyTable.vue"],"sourcesContent":["<template>\r\n  <bankes/>\r\n  <div class=\"container fluid customData\">\r\n    <vNotification :messages=\"messages\"/>\r\n    <div class=\"row\">\r\n      <div class=\"col-12 col-md-6\">\r\n        <rangeFilter @rangeFilterClients=\"rangeFilterClients\"/>\r\n      </div>\r\n      <div class=\"col-md-6\" :class=\"{'hidden__content': modelType !== 'novoregi'}\">\r\n        <div class=\"col-12 col-md-12 col-sm-12 col-lg-10 col-xl-8\">\r\n          <div class=\"data_non_called_clients\">\r\n            <ul class=\"list-group\">\r\n              <li class=\"list-group-item d-flex justify-content-between align-items-center\">Альфабанк:\r\n                <span class=\"badge badge-primary badge-pill statisticsDataSpan\">{{ statisticsData.alfabank_data_json }}</span>\r\n              </li>\r\n              <li class=\"list-group-item d-flex justify-content-between align-items-center\">ВтБ:\r\n                <span class=\"badge badge-primary badge-pill statisticsDataSpan\">{{ statisticsData.vtb_data_json }}</span>\r\n              </li>\r\n              <li class=\"list-group-item d-flex justify-content-between align-items-center\">Открытие:\r\n                <span class=\"badge badge-primary badge-pill statisticsDataSpan\">{{ statisticsData.otkritie_data_json }}</span>\r\n              </li>\r\n              <li class=\"list-group-item d-flex justify-content-between align-items-center\">Точка:\r\n                <span class=\"badge badge-primary badge-pill statisticsDataSpan\">{{ statisticsData.tochka_data_json }}</span>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  \r\n  <div class=\"container fluid\">\r\n    <div class=\"row\">\r\n      <div class=\"col-md-8\">\r\n        <table class=\"table table-sm table-striped\" :name=\"Client.id\" v-for=\"Client in tableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\">\r\n          <thead class=\"table-dark\">\r\n            <tr>\r\n\r\n              <th rowspan=\"2\" :class=\"firstTableHeaders[0].key\"><p>{{ firstTableHeaders[0].value }}</p></th>\r\n              <th class=\"cell\" rowspan=\"2\" :name=\"`id ${Client.id}`\" :id=\"`id ${Client.id}`\">\r\n                {{ Client.id }}\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ secondTableHeaders[0].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`inn ${Client.id}`\">\r\n                <textarea :value=\"Client.inn\" name=\"inn\" :id=\"`inn ${Client.id}`\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ thirdTableHeaders[1].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`comment ${Client.id}`\">\r\n                <textarea :value=\"Client.comment\" name=\"comment\" :id=\"`comment ${Client.id}`\"/>\r\n              </th>\r\n\r\n            </tr>\r\n            <tr>\r\n              <th><p>{{ secondTableHeaders[1].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`name_company ${Client.id}`\">\r\n                <textarea :value=\"Client.name_company\" name=\"name_company\" :id=\"`name_company ${Client.id}`\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ thirdTableHeaders[2].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`additional_comment ${Client.id}`\">\r\n                <select class=\"form-select\" :id=\"`additional_comment ${Client.id}`\">\r\n                  <option>Доп. коммент</option>\r\n                  <option v-for=\"comment in additionalComments\" v-bind:key=\"comment.id\">{{comment.list}}</option>\r\n                </select>\r\n              </th>\r\n\r\n            </tr> \r\n            <tr>\r\n\r\n              <th :class=\"firstTableHeaders[1].key\"><p>{{ firstTableHeaders[1].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`status_inn ${Client.id}`\">\r\n                <textarea :value=\"Client.status_inn\" name=\"status_inn\" :id=\"`status_inn ${Client.id}`\" readonly=\"readonly\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ secondTableHeaders[2].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`surname ${Client.id}`\">\r\n                <textarea :value=\"Client.surname\" name=\"surname\" :id=\"`surname ${Client.id}`\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ thirdTableHeaders[3].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`send_rko ${Client.id}`\">\r\n                <!-- <div class=\"form-check\"> -->\r\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" :id=\"`send_rko_checkbox ${Client.id}`\">\r\n                <label class=\"form-check-label\" :for=\"`send_rko_checkbox ${Client.id}`\">Отправить</label>\r\n                <!-- </div> -->\r\n                <!-- <input type=\"checkbox\" class=\"btn-check send_rko_checkbox\" :id=\"`btn-check-outlined send_rko_checkbox ${Client.id}`\" autocomplete=\"off\">\r\n                <label class=\"btn btn-outline-primary send_rko_checkbox\" for=\"btn-check-outlined send_rko_checkbox\">Отправить</label><br> -->\r\n              </th>\r\n\r\n            </tr>\r\n\r\n            <tr>\r\n\r\n              <th :class=\"firstTableHeaders[2].key\"><p>{{ firstTableHeaders[2].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`bank_city ${Client.id}`\">\r\n                <textarea :value=\"Client.bank_city\" name=\"bank_city\" :id=\"`bank_city ${Client.id}`\"/>\r\n              </th>\r\n              <th><p>{{ secondTableHeaders[3].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`first_name ${Client.id}`\">\r\n                <textarea :value=\"Client.first_name\" name=\"first_name\" :id=\"`first_name ${Client.id}`\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ thirdTableHeaders[4].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`client_type ${Client.id}`\">\r\n                <select class=\"form-select\" :id=\"`client_type ${Client.id}`\">\r\n                  <option>Тип клиента</option>\r\n                  <option v-for=\"clientType in clientsTypeForOperators\" v-bind:key=\"clientType.key\" :id=\"clientType.key\">{{clientType.value}}</option>\r\n                </select>\r\n              </th>\r\n\r\n            </tr>\r\n\r\n            <tr>\r\n              <th :class=\"firstTableHeaders[3].key\"><p>{{ firstTableHeaders[3].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`bank_response ${Client.id}`\">\r\n                <textarea :value=\"Client.bank_response\" name=\"bank_response\" :id=\"`bank_response ${Client.id}`\" readonly=\"readonly\"/>\r\n              </th>\r\n              <th><p>{{ secondTableHeaders[4].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`patronomic ${Client.id}`\">\r\n                <textarea :value=\"Client.patronomic\" name=\"patronomic\" :id=\"`patronomic ${Client.id}`\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th><p>{{ thirdTableHeaders[0].value }}</p></th>\r\n              <th class=\"cell\" :name=\"`phone ${Client.id}`\">\r\n                <!-- <textarea :value=\"Client.phone\" name=\"patronomic\"/> -->\r\n                <textarea :value=\"returnStrippedPhone(Client.phone)\" name=\"patronomic\" :id=\"`phone ${Client.id}`\"/>\r\n                <!-- <a :href=\"`tel:${returnStrippedPhone(Client.phone)}`\" :id=\"`phone ${Client.id}`\">{{returnStrippedPhone(Client.phone)}}</a> -->\r\n              </th>\r\n              \r\n            </tr>\r\n\r\n            <tr>\r\n              <th :class=\"secondTableHeaders[5].key\"><p>{{ secondTableHeaders[5].value }}</p></th>\r\n              <th colspan=\"3\" class=\"cell\" :name=\"`adress ${Client.id}`\">\r\n                <textarea :value=\"Client.adress\" name=\"adress\" :id=\"`adress ${Client.id}`\"/>\r\n              </th>\r\n              <!-- ------------------------------------------------------------------ -->\r\n              <th colspan=\"2\" class=\"cell\">\r\n                <button class=\"btn btn-primary send-data\" :id=\"`sendButton ${Client.id}`\" type=\"submit\" @click=\"SendOnStatistic\">Отправить в реестр</button>\r\n              </th>\r\n            </tr>\r\n\r\n          </thead>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  \r\n  <div class=\"v-table__paginator\">\r\n    <div class=\"row\">\r\n    <paginate\r\n      :page-count=\"pages\"\r\n      :page-range=\"5\"\r\n      :click-handler=\"clickPage\"\r\n      :prev-text=\"'Предыдущий'\"\r\n      :next-text=\"'Следующий'\"\r\n      :container-class=\"'v-table__paginator'\">\r\n    </paginate>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\n  import bankes from '@/components/bankes.vue'\r\n  import rangeFilter from '@/components/rangeFilter.vue'\r\n  import vNotification from '@/components/v-notification.vue'\r\n  import { mapGetters, mapActions } from 'vuex'\r\n  import Paginate from \"vuejs-paginate-next\";\r\n  import RangeFilterClients from '@/assets/rangeFilterDiapason.js'\r\n  import { GetData } from '@/assets/FetchRequest.js'\r\n  import { BodyStore, PaginatonStore } from '@/assets/updateStore.js'\r\n  import { FetchClient, FetchStatistics } from '@/assets/sendEntryesOnServer.js'\r\n\r\n  export default {\r\n      name: 'bodyTable',\r\n      data() {\r\n        return {\r\n          clientsPerPage: 2,\r\n          pageNumber: 1,\r\n          messages: []\r\n        }\r\n      },\r\n      components: {\r\n        bankes,\r\n        Paginate,\r\n        rangeFilter,\r\n        vNotification\r\n      },\r\n      computed: {\r\n        ...mapGetters([\"firstTableHeaders\", \"secondTableHeaders\", \"thirdTableHeaders\", \r\n        \"tableBody\", \"additionalComments\", \"clientsTypeForOperators\", \"statisticsData\", \r\n        \"paginateData\", \"clientsPerPageData\"]),\r\n\r\n        howClients () {\r\n          return this.tableBody.length\r\n        },\r\n        pages () {\r\n          return Math.ceil(this.paginateData / this.clientsPerPageData)\r\n        },\r\n        modelType () {\r\n            return localStorage.getItem('user_class_model')\r\n        }\r\n      },\r\n      methods: mapActions(['websocketConnect', 'setVariablesFromLocalStorage', 'getDataDRF']),\r\n      methods: {\r\n        UpdateScrollHeight (event) {\r\n          const currentTextareaField = document.getElementById(event.target.id);\r\n          currentTextareaField.style.cssText = `height: ${currentTextareaField, currentTextareaField.scrollHeight}px; overflow-y: hidden`;\r\n        },\r\n        async clickPage (page) {\r\n          if (page !== '...'){\r\n            this.pageNumber = page;\r\n            localStorage.setItem('currentPage', page)\r\n\r\n            const GetDataInstance = new GetData(this.clientsPerPageData)\r\n            let data = await GetDataInstance.returnSlice()\r\n\r\n            const BodyStoreInstance = new BodyStore(this.$store, data)\r\n            BodyStoreInstance.update()\r\n\r\n            const PaginatonStoreInstance = new PaginatonStore(this.$store, data)\r\n            PaginatonStoreInstance.update()\r\n          }\r\n        },\r\n        async rangeFilterClients (event) {\r\n          const RangeFilterClientsInstance = new RangeFilterClients(event, this.$store)\r\n          RangeFilterClientsInstance.updateStoreTableBody(this.tableBody)\r\n\r\n          const GetDataInstance = new GetData(this.clientsPerPageData)\r\n          let data = await GetDataInstance.returnSlice()\r\n\r\n          const BodyStoreInstance = new BodyStore(this.$store, data)\r\n          BodyStoreInstance.update()\r\n\r\n          const PaginatonStoreInstance = new PaginatonStore(this.$store, data)\r\n          PaginatonStoreInstance.update()\r\n        },\r\n        SendOnStatistic (event) {\r\n          // function callback (data) {\r\n          //     data.then(responseData => {\r\n          //       let clientId = (event.target.id).replace('sendButton', '')\r\n          //       this.messages.unshift({name: `Клиент с ${clientId} ID - успешно сохранен`, id: clientId})\r\n          //     })\r\n          // }\r\n\r\n          const FetchClientInstance = new FetchClient(event)\r\n          FetchClientInstance.send()\r\n\r\n          const FetchStatisticsInstance = new FetchStatistics(event)\r\n          FetchStatisticsInstance.send()\r\n\r\n          let clientId = (event.target.id).replace('sendButton', '')\r\n          this.messages.unshift({name: `Клиент с ${clientId} ID - успешно сохранен`, id: clientId})\r\n        },\r\n        returnStrippedPhone(phone_str) {\r\n          return phone_str.replace('=', '')\r\n        }\r\n      },\r\n      async mounted() {\r\n        this.$store.dispatch('setVariablesFromLocalStorage');\r\n        this.$store.dispatch('getDataDRF');\r\n        this.$store.dispatch('websocketConnect');\r\n      }\r\n  }\r\n</script>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<!-- <table class=\"table table-sm table-striped\">\r\n    <thead class=\"table-dark\">\r\n      <tr>\r\n        <th v-for=\"(header, head) in allHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\r\n          <td v-if=\"header.value !== 'username'\">{{header.value}}</td>\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr :name=\"Client.id\" v-for=\"Client in paginatedClients\" v-bind:key=\"Client.id\" :id=\"Client.id\" class=\"container-fluid\" >\r\n        <td v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" class=\"col\" :class=\"fieldName\" :id=\"fieldName\">\r\n          <div>\r\n            <textarea \r\n              v-if=\"fieldName !== 'username_id'\" :id=\"`${Client.id} ${fieldName}`\" v-bind:value=\"field\" :name=\"fieldName\" \r\n              @input=\"UpdateScrollHeight\" @change=\"CreateInput\"\r\n            />\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table> -->\r\n  <!-- <div class=\"v-table__paginator\">\r\n    <div class=\"page\" \r\n        v-for=\"page in displayingPages\" :key=\"page\" :class=\"{'page__selected': page === pageNumber}\" @click=\"clickPage(page)\">\r\n          {{ page }}\r\n        </div>\r\n  </div> -->\r\n\r\n  <!-- <div class=\"container fluid\"> -->\r\n    <!-- <div class=\"row\"> -->\r\n      <!-- <table class=\"table table-sm table-striped\">\r\n        <tbody>\r\n          <td v-for=\"Client in firstTableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\" :name=\"Client.id\">\r\n            <div class=\"col-md-4\">\r\n              <table class=\"table table-sm table-striped\">\r\n                <thead class=\"table-dark\">\r\n                  <tr v-for=\"(header, head) in firstTableHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\r\n                    <th>\r\n                      {{ header.value }}\r\n                    </th>\r\n                    <th class=\"cell\" v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" :id=\"fieldName\" :class=\"{'field__hidden': fieldName != header.key}\">\r\n                      <textarea v-bind:value=\"field\" :name=\"fieldName\" />\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n              </table>\r\n            </div>\r\n          </td>\r\n          <td v-for=\"Client in secondTableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\" :name=\"Client.id\">\r\n            <div class=\"col-md-4\">\r\n              <table class=\"table table-sm table-striped\">\r\n                <thead class=\"table-dark\">\r\n                  <tr v-for=\"(header, head) in secondTableHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\r\n                    <th>\r\n                      {{ header.value }}\r\n                    </th>\r\n                    <th class=\"cell\" v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" :id=\"fieldName\" :class=\"{'field__hidden': fieldName != header.key}\">\r\n                      <textarea v-bind:value=\"field\" :name=\"fieldName\"/>\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n              </table>\r\n            </div>\r\n          </td>\r\n          <td v-for=\"Client in thirdTableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\" :name=\"Client.id\">\r\n            <div class=\"col-md-4\">\r\n              <table class=\"table table-sm table-striped\">\r\n                <thead class=\"table-dark\">\r\n                  <tr v-for=\"(header, head) in thirdTableHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\r\n                    <th>\r\n                      {{ header.value }}\r\n                    </th>\r\n                    <th class=\"cell\" v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" :id=\"fieldName\" :class=\"{'field__hidden': fieldName != header.key}\">\r\n                      <textarea v-bind:value=\"field\" :name=\"fieldName\" />\r\n                    </th>\r\n                  </tr>\r\n                </thead>\r\n              </table>\r\n            </div>\r\n          </td>\r\n        </tbody>\r\n      </table> -->\r\n    <!-- </div> -->\r\n  <!-- </div> -->\r\n  // paginatedClients () {\r\n        //   let from = (this.pageNumber -1) * this.clientsPerPage;\r\n        //   let to = from + this.clientsPerPage;\r\n        //   return this.tableBody.slice(from, to);\r\n        // },"]},"metadata":{},"sourceType":"module"}