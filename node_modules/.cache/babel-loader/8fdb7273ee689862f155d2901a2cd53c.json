{"ast":null,"code":"import { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport App from './App.vue';\nimport router from './router';\nimport Paginate from \"vuejs-paginate-next\";\nimport \"@/assets/css/table.css\";\nimport vSelect from \"vue-select\";\nimport \"vue-select/dist/vue-select.css\";\nimport SetWorkStatus from '@/assets/set_work_status.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nconst defaultClientType = 'novoregi';\nconst store = createStore({\n  actions: {\n    async websocketConnect(ctx) {\n      let username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n      let class_model = localStorage.getItem('user_class_model');\n\n      if (class_model == null) {\n        class_model = defaultClientType;\n      }\n\n      var url = `ws://localhost:8000/ws/${class_model}/${username}/`;\n      console.log('Starting connection to WebSocket Server');\n      this.connection = new WebSocket(url);\n\n      this.connection.onmessage = function (event) {\n        var messageCatch = JSON.parse(event.data);\n\n        if (JSON.parse(messageCatch.message).username_id !== undefined) {\n          const operator_id = JSON.parse(messageCatch.message).username_id;\n          document.cookie = `username_id=${operator_id}; secure`;\n          const InstanceSetWorkStatus = new SetWorkStatus(messageCatch);\n          InstanceSetWorkStatus.setStatus();\n          const InstanceSetBankButton = new SetBankButton();\n          InstanceSetBankButton.setButtonStatus(messageCatch);\n          const InstanceSetClientsModelButton = new SetClientsModelButton();\n          InstanceSetClientsModelButton.setButtonStatus(class_model); // const InstanceSetValuesDiapasonInput = new SetValuesDiapasonInput(messageCatch)\n          // InstanceSetValuesDiapasonInput.set()\n        } else {\n          const tableHeadersMessage = JSON.parse(messageCatch.message).headers;\n          const tableBodyMessage = JSON.parse(messageCatch.message).body;\n          const additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments;\n          const clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators;\n          ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first);\n          ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second);\n          ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third);\n          ctx.commit('updateTableBody', tableBodyMessage);\n          ctx.commit('updateAdditionalComments', additionalCommentsMessage);\n          ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage);\n        }\n      };\n\n      this.connection.onopen = function (event) {\n        console.log('Successfully connected to first channel websocket');\n      };\n\n      function connect_server() {\n        let username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n        var url = `ws://localhost:8000/ws/chat/${username}/`;\n        console.log('Starting connection to WebSocket Server');\n        this.connection = new WebSocket(url);\n      }\n\n      this.connection.onclose = function (event) {\n        console.log('Disconnect! Start connection');\n\n        for (var i = 0; i < 3; i++) {\n          setTimeout(function timer() {\n            let username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n            var url = `ws://localhost:8000/ws/chat/${username}/`;\n            console.log('Starting connection to WebSocket Server');\n            this.connection = new WebSocket(url);\n          }, i * 3000);\n        }\n\n        location.reload();\n      };\n    }\n\n  },\n  mutations: {\n    updateFirstTableHeaders(state, firstTableHeadersMessage) {\n      state.firstTableHeadersArray = firstTableHeadersMessage;\n    },\n\n    updateSecondTableHeaders(state, secondTableHeadersMessage) {\n      state.secondTableHeadersArray = secondTableHeadersMessage;\n    },\n\n    updateThirdTableHeaders(state, thirdTableHeadersMessage) {\n      state.thirdTableHeadersArray = thirdTableHeadersMessage;\n    },\n\n    updateTableBody(state, tableBodyMessage) {\n      state.tableBodyArray = tableBodyMessage;\n    },\n\n    updateAdditionalComments(state, additionalCommentsMessage) {\n      state.additionalCommentsArray = additionalCommentsMessage;\n    },\n\n    updateClientsTypeForOperators(state, clientsTypeForOperatorsMessage) {\n      state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage;\n    }\n\n  },\n  state: {\n    firstTableHeadersArray: [],\n    secondTableHeadersArray: [],\n    thirdTableHeadersArray: [],\n    tableBodyArray: [],\n    additionalCommentsArray: [],\n    clientsTypeForOperatorsArray: []\n  },\n  getters: {\n    firstTableHeaders(state) {\n      return state.firstTableHeadersArray;\n    },\n\n    secondTableHeaders(state) {\n      return state.secondTableHeadersArray;\n    },\n\n    thirdTableHeaders(state) {\n      return state.thirdTableHeadersArray;\n    },\n\n    tableBody(state) {\n      return state.tableBodyArray;\n    },\n\n    additionalComments(state) {\n      return state.additionalCommentsArray;\n    },\n\n    clientsTypeForOperators(state) {\n      return state.clientsTypeForOperatorsArray;\n    }\n\n  },\n  modules: {}\n});\nconst app = createApp(App);\napp.use(vSelect);\napp.use(store);\napp.use(router);\napp.use(Paginate);\napp.mount('#app'); // updateHeaders (state, tableHeadersMessage) {\n//     state.tableHeadersArray = tableHeadersMessage\n// },\n// updateClients (state, tableBodyMessage) {\n//     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\n//         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\n//             return 1;\n//           }\n//           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\n//             return -1;\n//           }\n//           return 0;\n//     })\n// },\n// updateDropDownCommentsArray (state, dropDownCommentsMessage) {\n//     state.dropDownCommentsArray = dropDownCommentsMessage\n// },\n// updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\n//     state.dropDownCityAlfabank = dropDownCityAlfabank\n// },","map":{"version":3,"sources":["C:/current_front/src/main.js"],"names":["createApp","createStore","GetUsernameFromCoockies","App","router","Paginate","vSelect","SetWorkStatus","SetBankButton","SetClientsModelButton","defaultClientType","store","actions","websocketConnect","ctx","username","document","cookie","findUsernameString","class_model","localStorage","getItem","url","console","log","connection","WebSocket","onmessage","event","messageCatch","JSON","parse","data","message","username_id","undefined","operator_id","InstanceSetWorkStatus","setStatus","InstanceSetBankButton","setButtonStatus","InstanceSetClientsModelButton","tableHeadersMessage","headers","tableBodyMessage","body","additionalCommentsMessage","additional_comments","clientsTypeForOperatorsMessage","clients_type_for_operators","commit","first","second","third","onopen","connect_server","onclose","i","setTimeout","timer","location","reload","mutations","updateFirstTableHeaders","state","firstTableHeadersMessage","firstTableHeadersArray","updateSecondTableHeaders","secondTableHeadersMessage","secondTableHeadersArray","updateThirdTableHeaders","thirdTableHeadersMessage","thirdTableHeadersArray","updateTableBody","tableBodyArray","updateAdditionalComments","additionalCommentsArray","updateClientsTypeForOperators","clientsTypeForOperatorsArray","getters","firstTableHeaders","secondTableHeaders","thirdTableHeaders","tableBody","additionalComments","clientsTypeForOperators","modules","app","use","mount"],"mappings":"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","sourcesContent":["import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport Paginate from \"vuejs-paginate-next\";\r\nimport \"@/assets/css/table.css\"\r\nimport vSelect from \"vue-select\";\r\nimport \"vue-select/dist/vue-select.css\";\r\n\r\nimport SetWorkStatus from '@/assets/set_work_status.js'\r\nimport SetBankButton from '@/assets/set_bank_button.js'\r\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\r\n\r\n\r\nconst defaultClientType = 'novoregi'\r\n\r\n\r\nconst store = createStore({\r\n    actions: {\r\n        async websocketConnect(ctx) {\r\n            let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n            let class_model = localStorage.getItem('user_class_model')\r\n\r\n            if (class_model == null){\r\n                class_model = defaultClientType\r\n            }\r\n\r\n            var url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n        \r\n            console.log('Starting connection to WebSocket Server')\r\n            this.connection = new WebSocket(url)\r\n\r\n            this.connection.onmessage = function (event) {\r\n                var messageCatch = JSON.parse(event.data)\r\n                \r\n                \r\n                if (JSON.parse(messageCatch.message).username_id !== undefined) {\r\n                    const operator_id = JSON.parse(messageCatch.message).username_id\r\n\r\n                    document.cookie = `username_id=${operator_id}; secure`\r\n\r\n                    const InstanceSetWorkStatus = new SetWorkStatus(messageCatch)\r\n                    InstanceSetWorkStatus.setStatus()\r\n\r\n                    const InstanceSetBankButton = new SetBankButton()\r\n                    InstanceSetBankButton.setButtonStatus(messageCatch)\r\n\r\n                    const InstanceSetClientsModelButton = new SetClientsModelButton()\r\n                    InstanceSetClientsModelButton.setButtonStatus(class_model)\r\n\r\n                    // const InstanceSetValuesDiapasonInput = new SetValuesDiapasonInput(messageCatch)\r\n                    // InstanceSetValuesDiapasonInput.set()\r\n                }\r\n                else {\r\n                    const tableHeadersMessage = JSON.parse(messageCatch.message).headers\r\n                    const tableBodyMessage = JSON.parse(messageCatch.message).body\r\n                    const additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments\r\n                    const clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators\r\n\r\n\r\n                    ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\r\n                    ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\r\n                    ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\r\n                    ctx.commit('updateTableBody', tableBodyMessage)\r\n                    ctx.commit('updateAdditionalComments', additionalCommentsMessage)\r\n                    ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage)\r\n                }                \r\n            }\r\n            \r\n            this.connection.onopen = function (event) {\r\n                console.log('Successfully connected to first channel websocket')\r\n                }\r\n            \r\n            function connect_server() {\r\n                let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                var url = `ws://localhost:8000/ws/chat/${username}/`\r\n                console.log('Starting connection to WebSocket Server')\r\n                this.connection = new WebSocket(url);\r\n            }\r\n\r\n            this.connection.onclose = function (event) {\r\n                console.log('Disconnect! Start connection')\r\n                for (var i = 0; i < 3; i++) {\r\n                    setTimeout( function timer(){\r\n                        let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                        var url = `ws://localhost:8000/ws/chat/${username}/`\r\n                        console.log('Starting connection to WebSocket Server')\r\n                        this.connection = new WebSocket(url);\r\n                    }, i*3000 );\r\n                }\r\n                location.reload()\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        updateFirstTableHeaders (state, firstTableHeadersMessage) {\r\n            state.firstTableHeadersArray = firstTableHeadersMessage\r\n            \r\n        },\r\n        updateSecondTableHeaders (state, secondTableHeadersMessage) {\r\n            state.secondTableHeadersArray = secondTableHeadersMessage\r\n        },\r\n        updateThirdTableHeaders (state, thirdTableHeadersMessage) {\r\n            state.thirdTableHeadersArray = thirdTableHeadersMessage\r\n        },\r\n\r\n        updateTableBody (state, tableBodyMessage) {\r\n            state.tableBodyArray = tableBodyMessage\r\n        },\r\n\r\n        updateAdditionalComments (state, additionalCommentsMessage) {\r\n            state.additionalCommentsArray = additionalCommentsMessage\r\n        },\r\n        updateClientsTypeForOperators (state, clientsTypeForOperatorsMessage) {\r\n            state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage\r\n        },\r\n        \r\n    },\r\n    state: {\r\n        firstTableHeadersArray: [],\r\n        secondTableHeadersArray: [],\r\n        thirdTableHeadersArray: [],\r\n        tableBodyArray: [],\r\n        additionalCommentsArray: [],\r\n        clientsTypeForOperatorsArray: []\r\n    },\r\n    getters: {\r\n        firstTableHeaders(state) {\r\n            return state.firstTableHeadersArray\r\n        },\r\n        secondTableHeaders(state) {\r\n            return state.secondTableHeadersArray\r\n        },\r\n        thirdTableHeaders(state) {\r\n            return state.thirdTableHeadersArray\r\n        },\r\n\r\n        tableBody(state) {\r\n            return state.tableBodyArray\r\n        },\r\n\r\n        additionalComments(state) {\r\n            return state.additionalCommentsArray\r\n        },\r\n        clientsTypeForOperators(state) {\r\n            return state.clientsTypeForOperatorsArray\r\n        },\r\n\r\n    },\r\n    modules: {}\r\n})\r\n\r\nconst app = createApp(App);\r\napp.use(vSelect)\r\napp.use(store)\r\napp.use(router)\r\napp.use(Paginate)\r\napp.mount('#app')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// updateHeaders (state, tableHeadersMessage) {\r\n        //     state.tableHeadersArray = tableHeadersMessage\r\n        // },\r\n// updateClients (state, tableBodyMessage) {\r\n        //     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\r\n        //         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\r\n        //             return 1;\r\n        //           }\r\n        //           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\r\n        //             return -1;\r\n        //           }\r\n        //           return 0;\r\n        //     })\r\n        // },\r\n        // updateDropDownCommentsArray (state, dropDownCommentsMessage) {\r\n        //     state.dropDownCommentsArray = dropDownCommentsMessage\r\n        // },\r\n        // updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\r\n        //     state.dropDownCityAlfabank = dropDownCityAlfabank\r\n        // },"]},"metadata":{},"sourceType":"module"}