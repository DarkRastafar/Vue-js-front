{"ast":null,"code":"import _asyncToGenerator from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport App from './App.vue';\nimport router from './router';\nimport Paginate from \"vuejs-paginate-next\";\nimport \"@/assets/css/table.css\";\nimport vSelect from \"vue-select\";\nimport \"vue-select/dist/vue-select.css\";\nimport SetWorkStatus from '@/assets/set_work_status.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nimport { SetValuesToRangeFilter } from '@/assets/setVariablesToOperator.js';\nimport { GetData } from '@/assets/FetchRequest.js';\nvar defaultClientType = 'novoregi';\nvar store = createStore({\n  actions: {\n    setVariablesFromLocalStorage: function setVariablesFromLocalStorage() {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var SetValuesToRangeFilterInstance;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                SetValuesToRangeFilterInstance = new SetValuesToRangeFilter();\n                SetValuesToRangeFilterInstance.set();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getDataDRF: function getDataDRF(ctx) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var GetDataInstance, responseData, paginateData, responseBody, responseHeaders;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                GetDataInstance = new GetData();\n                _context2.next = 3;\n                return GetDataInstance.returnSlice();\n\n              case 3:\n                responseData = _context2.sent;\n                paginateData = responseData.data.body.paginate_data;\n                responseBody = responseData.data.body.body;\n                responseHeaders = responseData.data.headers;\n                console.log(responseData);\n                console.log(paginateData);\n                console.log(responseBody);\n                console.log(headers);\n                ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first);\n                ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second);\n                ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third);\n                ctx.commit('updateTableBody', responseBody);\n                ctx.commit('updatePaginateData', paginateData);\n\n              case 16:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    websocketConnect: function websocketConnect(ctx) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var username, class_model, url, connect_server;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                connect_server = function _connect_server() {\n                  var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                  var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                  console.log('Starting connection to WebSocket Server');\n                  this.connection = new WebSocket(url);\n                };\n\n                username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                class_model = localStorage.getItem('user_class_model');\n\n                if (class_model == null) {\n                  class_model = defaultClientType;\n                }\n\n                url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                console.log('Starting connection to WebSocket Server');\n                _this.connection = new WebSocket(url);\n\n                _this.connection.onmessage = function (event) {\n                  var messageCatch = JSON.parse(event.data);\n\n                  if (JSON.parse(messageCatch.message).username_id !== undefined) {\n                    var operator_id = JSON.parse(messageCatch.message).username_id;\n                    document.cookie = \"username_id=\".concat(operator_id, \"; secure\");\n                    localStorage.setItem('username_id', operator_id);\n                    var InstanceSetWorkStatus = new SetWorkStatus(messageCatch);\n                    InstanceSetWorkStatus.setStatus();\n                    var InstanceSetBankButton = new SetBankButton();\n                    InstanceSetBankButton.setButtonStatus(messageCatch);\n                    var InstanceSetClientsModelButton = new SetClientsModelButton();\n                    InstanceSetClientsModelButton.setButtonStatus(class_model);\n                  } else if (JSON.parse(messageCatch.message).headers !== undefined) {\n                    var _tableHeadersMessage = JSON.parse(messageCatch.message).headers;\n                    var tableBodyMessage = JSON.parse(messageCatch.message).body.body;\n                    var additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments;\n                    var clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators;\n                    ctx.commit('updateFirstTableHeaders', _tableHeadersMessage.first);\n                    ctx.commit('updateSecondTableHeaders', _tableHeadersMessage.second);\n                    ctx.commit('updateThirdTableHeaders', _tableHeadersMessage.third);\n                    ctx.commit('updateTableBody', tableBodyMessage);\n                    ctx.commit('updateAdditionalComments', additionalCommentsMessage);\n                    ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage);\n                  } else if (JSON.parse(messageCatch.message).statistics !== undefined) {\n                    var statisticsDataMessage = JSON.parse(messageCatch.message).statistics;\n                    ctx.commit('updateStatisticsData', statisticsDataMessage);\n                  }\n                };\n\n                _this.connection.onopen = function (event) {\n                  console.log('Successfully connected to first channel websocket');\n                };\n\n                _this.connection.onclose = function (event) {\n                  console.log('Disconnect! Start connection');\n\n                  for (var i = 0; i < 3; i++) {\n                    setTimeout(function timer() {\n                      var username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                      var class_model = localStorage.getItem('user_class_model');\n                      var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n\n                      if (class_model == null) {\n                        class_model = defaultClientType;\n                      }\n\n                      console.log('Starting connection to WebSocket Server');\n                      this.connection = new WebSocket(url);\n                    }, i * 3000);\n                  }\n\n                  location.reload();\n                };\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  },\n  mutations: {\n    updateFirstTableHeaders: function updateFirstTableHeaders(state, firstTableHeadersMessage) {\n      state.firstTableHeadersArray = firstTableHeadersMessage;\n    },\n    updateSecondTableHeaders: function updateSecondTableHeaders(state, secondTableHeadersMessage) {\n      state.secondTableHeadersArray = secondTableHeadersMessage;\n    },\n    updateThirdTableHeaders: function updateThirdTableHeaders(state, thirdTableHeadersMessage) {\n      state.thirdTableHeadersArray = thirdTableHeadersMessage;\n    },\n    updateTableBody: function updateTableBody(state, tableBodyMessage) {\n      state.tableBodyArray = tableBodyMessage;\n    },\n    updateAdditionalComments: function updateAdditionalComments(state, additionalCommentsMessage) {\n      state.additionalCommentsArray = additionalCommentsMessage;\n    },\n    updateClientsTypeForOperators: function updateClientsTypeForOperators(state, clientsTypeForOperatorsMessage) {\n      state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage;\n    },\n    updateStatisticsData: function updateStatisticsData(state, statisticsDataMessage) {\n      state.statisticsDataArray = statisticsDataMessage;\n    },\n    updatePaginateData: function updatePaginateData(state, paginateDataMessage) {\n      state.paginateDataVariable = paginateDataMessage;\n    }\n  },\n  state: {\n    firstTableHeadersArray: [],\n    secondTableHeadersArray: [],\n    thirdTableHeadersArray: [],\n    tableBodyArray: [],\n    additionalCommentsArray: [],\n    clientsTypeForOperatorsArray: [],\n    statisticsDataArray: [],\n    paginateDataVariable: Number()\n  },\n  getters: {\n    firstTableHeaders: function firstTableHeaders(state) {\n      return state.firstTableHeadersArray;\n    },\n    secondTableHeaders: function secondTableHeaders(state) {\n      return state.secondTableHeadersArray;\n    },\n    thirdTableHeaders: function thirdTableHeaders(state) {\n      return state.thirdTableHeadersArray;\n    },\n    tableBody: function tableBody(state) {\n      return state.tableBodyArray;\n    },\n    additionalComments: function additionalComments(state) {\n      return state.additionalCommentsArray;\n    },\n    clientsTypeForOperators: function clientsTypeForOperators(state) {\n      return state.clientsTypeForOperatorsArray;\n    },\n    statisticsData: function statisticsData(state) {\n      return state.statisticsDataArray;\n    },\n    paginateData: function paginateData(state) {\n      return state.paginateDataVariable;\n    }\n  },\n  modules: {}\n});\nvar app = createApp(App);\napp.use(vSelect);\napp.use(store);\napp.use(router);\napp.use(Paginate);\napp.mount('#app'); // updateHeaders (state, tableHeadersMessage) {\n//     state.tableHeadersArray = tableHeadersMessage\n// },\n// updateClients (state, tableBodyMessage) {\n//     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\n//         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\n//             return 1;\n//           }\n//           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\n//             return -1;\n//           }\n//           return 0;\n//     })\n// },\n// updateDropDownCommentsArray (state, dropDownCommentsMessage) {\n//     state.dropDownCommentsArray = dropDownCommentsMessage\n// },\n// updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\n//     state.dropDownCityAlfabank = dropDownCityAlfabank\n// },","map":{"version":3,"sources":["C:/current_front/src/main.js"],"names":["createApp","createStore","GetUsernameFromCoockies","App","router","Paginate","vSelect","SetWorkStatus","SetBankButton","SetClientsModelButton","SetValuesToRangeFilter","GetData","defaultClientType","store","actions","setVariablesFromLocalStorage","SetValuesToRangeFilterInstance","set","getDataDRF","ctx","GetDataInstance","returnSlice","responseData","paginateData","data","body","paginate_data","responseBody","responseHeaders","headers","console","log","commit","tableHeadersMessage","first","second","third","websocketConnect","connect_server","username","document","cookie","findUsernameString","url","class_model","connection","WebSocket","returnUsername","localStorage","getItem","onmessage","event","messageCatch","JSON","parse","message","username_id","undefined","operator_id","setItem","InstanceSetWorkStatus","setStatus","InstanceSetBankButton","setButtonStatus","InstanceSetClientsModelButton","tableBodyMessage","additionalCommentsMessage","additional_comments","clientsTypeForOperatorsMessage","clients_type_for_operators","statistics","statisticsDataMessage","onopen","onclose","i","setTimeout","timer","location","reload","mutations","updateFirstTableHeaders","state","firstTableHeadersMessage","firstTableHeadersArray","updateSecondTableHeaders","secondTableHeadersMessage","secondTableHeadersArray","updateThirdTableHeaders","thirdTableHeadersMessage","thirdTableHeadersArray","updateTableBody","tableBodyArray","updateAdditionalComments","additionalCommentsArray","updateClientsTypeForOperators","clientsTypeForOperatorsArray","updateStatisticsData","statisticsDataArray","updatePaginateData","paginateDataMessage","paginateDataVariable","Number","getters","firstTableHeaders","secondTableHeaders","thirdTableHeaders","tableBody","additionalComments","clientsTypeForOperators","statisticsData","modules","app","use","mount"],"mappings":"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","sourcesContent":["import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport Paginate from \"vuejs-paginate-next\";\r\nimport \"@/assets/css/table.css\"\r\nimport vSelect from \"vue-select\";\r\nimport \"vue-select/dist/vue-select.css\";\r\n\r\nimport SetWorkStatus from '@/assets/set_work_status.js'\r\nimport SetBankButton from '@/assets/set_bank_button.js'\r\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\r\nimport { SetValuesToRangeFilter } from '@/assets/setVariablesToOperator.js'\r\nimport { GetData } from '@/assets/FetchRequest.js'\r\n\r\n\r\nconst defaultClientType = 'novoregi'\r\n\r\n\r\nconst store = createStore({\r\n    actions: {\r\n        async setVariablesFromLocalStorage() {\r\n            const SetValuesToRangeFilterInstance = new SetValuesToRangeFilter()\r\n            SetValuesToRangeFilterInstance.set()\r\n        },\r\n        async getDataDRF(ctx) {\r\n            const GetDataInstance = new GetData()\r\n            let responseData = await GetDataInstance.returnSlice()\r\n            let paginateData = responseData.data.body.paginate_data\r\n            let responseBody = responseData.data.body.body\r\n            let responseHeaders = responseData.data.headers\r\n            console.log(responseData)\r\n            console.log(paginateData)\r\n            console.log(responseBody)\r\n            console.log(headers)\r\n            \r\n            ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\r\n            ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\r\n            ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\r\n            ctx.commit('updateTableBody', responseBody)\r\n            ctx.commit('updatePaginateData', paginateData)\r\n        },\r\n        async websocketConnect(ctx) {\r\n            let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\r\n            let class_model = localStorage.getItem('user_class_model')\r\n\r\n            if (class_model == null){\r\n                class_model = defaultClientType\r\n            }\r\n            \r\n            let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n        \r\n            console.log('Starting connection to WebSocket Server')\r\n            this.connection = new WebSocket(url)\r\n\r\n\r\n            this.connection.onmessage = function (event) {\r\n                let messageCatch = JSON.parse(event.data)\r\n                \r\n                if (JSON.parse(messageCatch.message).username_id !== undefined) {\r\n                    const operator_id = JSON.parse(messageCatch.message).username_id\r\n\r\n                    document.cookie = `username_id=${operator_id}; secure`\r\n                    localStorage.setItem('username_id', operator_id)\r\n\r\n                    const InstanceSetWorkStatus = new SetWorkStatus(messageCatch)\r\n                    InstanceSetWorkStatus.setStatus()\r\n\r\n                    const InstanceSetBankButton = new SetBankButton()\r\n                    InstanceSetBankButton.setButtonStatus(messageCatch)\r\n\r\n                    const InstanceSetClientsModelButton = new SetClientsModelButton()\r\n                    InstanceSetClientsModelButton.setButtonStatus(class_model)\r\n                }\r\n                else if (JSON.parse(messageCatch.message).headers !== undefined) {\r\n                    const tableHeadersMessage = JSON.parse(messageCatch.message).headers\r\n                    const tableBodyMessage = JSON.parse(messageCatch.message).body.body\r\n                    const additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments\r\n                    const clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators\r\n\r\n                    ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\r\n                    ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\r\n                    ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\r\n                    ctx.commit('updateTableBody', tableBodyMessage)\r\n                    ctx.commit('updateAdditionalComments', additionalCommentsMessage)\r\n                    ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage)\r\n                }\r\n                else if (JSON.parse(messageCatch.message).statistics !== undefined) {\r\n                    const statisticsDataMessage = JSON.parse(messageCatch.message).statistics\r\n                    ctx.commit('updateStatisticsData', statisticsDataMessage)\r\n                }          \r\n            }\r\n            \r\n            this.connection.onopen = function (event) {\r\n                console.log('Successfully connected to first channel websocket')\r\n                }\r\n            \r\n            function connect_server() {\r\n                let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n                console.log('Starting connection to WebSocket Server')\r\n                this.connection = new WebSocket(url);\r\n            }\r\n\r\n            this.connection.onclose = function (event) {\r\n                console.log('Disconnect! Start connection')\r\n                for (var i = 0; i < 3; i++) {\r\n                    setTimeout( function timer(){\r\n                        let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\r\n                        let class_model = localStorage.getItem('user_class_model')\r\n                        let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n\r\n                        if (class_model == null){\r\n                            class_model = defaultClientType\r\n                        }\r\n\r\n                        console.log('Starting connection to WebSocket Server')\r\n                        this.connection = new WebSocket(url);\r\n                    }, i*3000 );\r\n                }\r\n                location.reload()\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        updateFirstTableHeaders (state, firstTableHeadersMessage) {\r\n            state.firstTableHeadersArray = firstTableHeadersMessage\r\n            \r\n        },\r\n        updateSecondTableHeaders (state, secondTableHeadersMessage) {\r\n            state.secondTableHeadersArray = secondTableHeadersMessage\r\n        },\r\n        updateThirdTableHeaders (state, thirdTableHeadersMessage) {\r\n            state.thirdTableHeadersArray = thirdTableHeadersMessage\r\n        },\r\n\r\n        updateTableBody (state, tableBodyMessage) {\r\n            state.tableBodyArray = tableBodyMessage\r\n        },\r\n\r\n        updateAdditionalComments (state, additionalCommentsMessage) {\r\n            state.additionalCommentsArray = additionalCommentsMessage\r\n        },\r\n        updateClientsTypeForOperators (state, clientsTypeForOperatorsMessage) {\r\n            state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage\r\n        },\r\n\r\n        updateStatisticsData (state, statisticsDataMessage) {\r\n            state.statisticsDataArray = statisticsDataMessage\r\n        },\r\n\r\n        updatePaginateData (state, paginateDataMessage) {\r\n            state.paginateDataVariable = paginateDataMessage\r\n        }\r\n        \r\n    },\r\n    state: {\r\n        firstTableHeadersArray: [],\r\n        secondTableHeadersArray: [],\r\n        thirdTableHeadersArray: [],\r\n        tableBodyArray: [],\r\n        additionalCommentsArray: [],\r\n        clientsTypeForOperatorsArray: [],\r\n        statisticsDataArray: [],\r\n        paginateDataVariable: Number()\r\n    },\r\n    getters: {\r\n        firstTableHeaders(state) {\r\n            return state.firstTableHeadersArray\r\n        },\r\n        secondTableHeaders(state) {\r\n            return state.secondTableHeadersArray\r\n        },\r\n        thirdTableHeaders(state) {\r\n            return state.thirdTableHeadersArray\r\n        },\r\n\r\n        tableBody(state) {\r\n            return state.tableBodyArray\r\n        },\r\n\r\n        additionalComments(state) {\r\n            return state.additionalCommentsArray\r\n        },\r\n        clientsTypeForOperators(state) {\r\n            return state.clientsTypeForOperatorsArray\r\n        },\r\n        statisticsData(state) {\r\n            return state.statisticsDataArray\r\n        },\r\n        paginateData(state) {\r\n            return state.paginateDataVariable\r\n        },\r\n\r\n    },\r\n    modules: {}\r\n})\r\n\r\n\r\nconst app = createApp(App);\r\napp.use(vSelect)\r\napp.use(store)\r\napp.use(router)\r\napp.use(Paginate)\r\napp.mount('#app')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// updateHeaders (state, tableHeadersMessage) {\r\n        //     state.tableHeadersArray = tableHeadersMessage\r\n        // },\r\n// updateClients (state, tableBodyMessage) {\r\n        //     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\r\n        //         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\r\n        //             return 1;\r\n        //           }\r\n        //           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\r\n        //             return -1;\r\n        //           }\r\n        //           return 0;\r\n        //     })\r\n        // },\r\n        // updateDropDownCommentsArray (state, dropDownCommentsMessage) {\r\n        //     state.dropDownCommentsArray = dropDownCommentsMessage\r\n        // },\r\n        // updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\r\n        //     state.dropDownCityAlfabank = dropDownCityAlfabank\r\n        // },"]},"metadata":{},"sourceType":"module"}