{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nimport { SetValuesToRangeFilter } from '@/assets/setVariablesToOperator.js';\nimport { GetData } from '@/assets/FetchRequest.js';\nimport { MutationResponseData, MutationBody, MutationHeaders } from '@/assets/mutationResponseData.js';\nvar defaultOperatorBank = 'alfabank';\nvar defaultClientType = 'novoregi';\nvar defaultClientPerPage = 2;\nexport default createStore({\n  actions: {\n    setVariablesFromLocalStorage: function setVariablesFromLocalStorage() {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var SetValuesToRangeFilterInstance;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                SetValuesToRangeFilterInstance = new SetValuesToRangeFilter();\n                SetValuesToRangeFilterInstance.set();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    websocketConnect: function websocketConnect(ctx) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var username, class_model, url, connect_server;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                connect_server = function _connect_server() {\n                  var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                  var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                  console.log('Starting connection to WebSocket Server');\n                  this.connection = new WebSocket(url);\n                };\n\n                username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                class_model = localStorage.getItem('user_class_model');\n\n                if (class_model == null) {\n                  class_model = defaultClientType;\n                }\n\n                url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                console.log('Starting connection to WebSocket Server');\n                _this.connection = new WebSocket(url);\n\n                _this.connection.onmessage = function (event) {\n                  var messageCatch = JSON.parse(event.data);\n                  var eventName = messageCatch.event;\n\n                  if (eventName == 'operator_connect') {\n                    var operator_id = JSON.parse(messageCatch.message).username_id;\n                    document.cookie = \"username_id=\".concat(operator_id, \"; secure\");\n                    localStorage.setItem('username_id', operator_id);\n                    var InstanceSetBankButton = new SetBankButton();\n                    InstanceSetBankButton.setButtonStatusFromLocalStorage(defaultOperatorBank);\n                    var InstanceSetClientsModelButton = new SetClientsModelButton();\n                    InstanceSetClientsModelButton.setButtonStatus(class_model);\n                    ctx.commit('updateClientsPerPageData', defaultClientPerPage);\n                  } else if (eventName == 'send_non_called_statistics') {\n                    var statisticsDataMessage = JSON.parse(messageCatch.message).statistics;\n                    ctx.commit('updateStatisticsData', statisticsDataMessage);\n                  } else if (eventName == 'client_mutation') {\n                    var mutationClient = JSON.parse(messageCatch.message).client;\n                    var mutationClientID = mutationClient.id;\n                    var currentArray = ctx.getters.tableBody;\n\n                    var _iterator = _createForOfIteratorHelper(currentArray),\n                        _step;\n\n                    try {\n                      var _loop = function _loop() {\n                        var client = _step.value;\n\n                        if (client.id == mutationClientID) {\n                          var indexItem = currentArray.findIndex(function (i) {\n                            return i == client;\n                          }); // console.log(mutationClient)\n\n                          var MutationResponseDataInstance = new MutationResponseData(mutationClient);\n                          var mutationEntry = MutationResponseDataInstance.returnEntry(mutationClient);\n                          console.log(mutationEntry);\n                          ctx.commit('replaceItemIntoArray', [indexItem, mutationClient]);\n                        }\n                      };\n\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        _loop();\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n                  } else if (eventName == 'headers_mutation') {\n                    var responseHeaders = JSON.parse(messageCatch.message);\n                    console.log('headers_mutation');\n                    ctx.commit('updateFirstTableHeaders', responseHeaders.first);\n                    ctx.commit('updateSecondTableHeaders', responseHeaders.second);\n                    ctx.commit('updateThirdTableHeaders', responseHeaders.third);\n\n                    function callback(data) {\n                      data.then(function (responseData) {\n                        var paginateData = responseData.data.body.paginate_data;\n                        var responseBody = responseData.data.body.body;\n                        var responseAdditionalComments = responseData.data.additional_comments;\n                        var responseClientsTypeForOperators = responseData.data.clients_type_for_operators;\n                        ctx.commit('updateClientsPerPageData', defaultClientPerPage);\n                        ctx.commit('updatePaginateData', paginateData);\n                        ctx.commit('updateTableBody', responseBody);\n                        ctx.commit('updateAdditionalComments', responseAdditionalComments);\n                        ctx.commit('updateClientsTypeForOperators', responseClientsTypeForOperators);\n                      });\n                    }\n\n                    var GetDataInstance = new GetData(defaultClientPerPage);\n                    callback(GetDataInstance.returnSlice());\n                  }\n                };\n\n                _this.connection.onopen = function (event) {\n                  console.log('Successfully connected to first channel websocket');\n                };\n\n                _this.connection.onclose = function (event) {\n                  console.log('Disconnect! Start connection');\n\n                  for (var i = 0; i < 3; i++) {\n                    setTimeout(function timer() {\n                      var username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                      var class_model = localStorage.getItem('user_class_model');\n                      var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n\n                      if (class_model == null) {\n                        class_model = defaultClientType;\n                      }\n\n                      console.log('Starting connection to WebSocket Server');\n                      this.connection = new WebSocket(url);\n                    }, i * 3000);\n                  }\n\n                  location.reload();\n                };\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getDataDRF: function getDataDRF(ctx) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var GetDataInstance, responseData, MutationBodyInstance, mutationClientsDict, MutationHeadersInstance, mutationHeadersDict, paginateData, responseBody, responseHeaders, responseAdditionalComments, responseClientsTypeForOperators;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                GetDataInstance = new GetData(defaultClientPerPage);\n                _context3.next = 3;\n                return GetDataInstance.returnSlice();\n\n              case 3:\n                responseData = _context3.sent;\n                MutationBodyInstance = new MutationBody(responseData);\n                mutationClientsDict = MutationBodyInstance.returnMutationDict();\n                MutationHeadersInstance = new MutationHeaders(responseData);\n                mutationHeadersDict = MutationHeadersInstance.returnMutationDict();\n                console.log(mutationHeadersDict);\n                paginateData = responseData.data.body.paginate_data;\n                responseBody = mutationClientsDict;\n                responseHeaders = mutationHeadersDict;\n                responseAdditionalComments = responseData.data.additional_comments;\n                responseClientsTypeForOperators = responseData.data.clients_type_for_operators;\n                ctx.commit('updateClientsPerPageData', defaultClientPerPage);\n                ctx.commit('updatePaginateData', paginateData);\n                ctx.commit('updateFirstTableHeaders', responseHeaders.first);\n                ctx.commit('updateSecondTableHeaders', responseHeaders.second);\n                ctx.commit('updateThirdTableHeaders', responseHeaders.third);\n                ctx.commit('updateTableBody', responseBody);\n                ctx.commit('updateAdditionalComments', responseAdditionalComments);\n                ctx.commit('updateClientsTypeForOperators', responseClientsTypeForOperators);\n\n              case 22:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  },\n  mutations: {\n    updateFirstTableHeaders: function updateFirstTableHeaders(state, firstTableHeadersMessage) {\n      state.firstTableHeadersArray = firstTableHeadersMessage;\n    },\n    updateSecondTableHeaders: function updateSecondTableHeaders(state, secondTableHeadersMessage) {\n      state.secondTableHeadersArray = secondTableHeadersMessage;\n    },\n    updateThirdTableHeaders: function updateThirdTableHeaders(state, thirdTableHeadersMessage) {\n      state.thirdTableHeadersArray = thirdTableHeadersMessage;\n    },\n    updateTableBody: function updateTableBody(state, tableBodyMessage) {\n      state.tableBodyArray = tableBodyMessage;\n    },\n    replaceItemIntoArray: function replaceItemIntoArray(state, listUpdate) {\n      state.tableBodyArray[listUpdate[0]] = listUpdate[1];\n    },\n    updateAdditionalComments: function updateAdditionalComments(state, additionalCommentsMessage) {\n      state.additionalCommentsArray = additionalCommentsMessage;\n    },\n    updateClientsTypeForOperators: function updateClientsTypeForOperators(state, clientsTypeForOperatorsMessage) {\n      state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage;\n    },\n    updateStatisticsData: function updateStatisticsData(state, statisticsDataMessage) {\n      state.statisticsDataArray = statisticsDataMessage;\n    },\n    updatePaginateData: function updatePaginateData(state, paginateDataMessage) {\n      state.paginateDataVariable = paginateDataMessage;\n    },\n    updateClientsPerPageData: function updateClientsPerPageData(state, responseClientsPerPage) {\n      state.clientsPerPage = responseClientsPerPage;\n    }\n  },\n  state: {\n    firstTableHeadersArray: [],\n    secondTableHeadersArray: [],\n    thirdTableHeadersArray: [],\n    tableBodyArray: [],\n    additionalCommentsArray: [],\n    clientsTypeForOperatorsArray: [],\n    statisticsDataArray: [],\n    paginateDataVariable: Number(),\n    clientsPerPage: Number()\n  },\n  getters: {\n    firstTableHeaders: function firstTableHeaders(state) {\n      return state.firstTableHeadersArray;\n    },\n    secondTableHeaders: function secondTableHeaders(state) {\n      return state.secondTableHeadersArray;\n    },\n    thirdTableHeaders: function thirdTableHeaders(state) {\n      return state.thirdTableHeadersArray;\n    },\n    tableBody: function tableBody(state) {\n      return state.tableBodyArray;\n    },\n    additionalComments: function additionalComments(state) {\n      return state.additionalCommentsArray;\n    },\n    clientsTypeForOperators: function clientsTypeForOperators(state) {\n      return state.clientsTypeForOperatorsArray;\n    },\n    statisticsData: function statisticsData(state) {\n      return state.statisticsDataArray;\n    },\n    paginateData: function paginateData(state) {\n      return state.paginateDataVariable;\n    },\n    clientsPerPageData: function clientsPerPageData(state) {\n      return state.clientsPerPage;\n    }\n  },\n  modules: {}\n});","map":{"version":3,"sources":["C:/Vue-js-front-1/src/store/index.js"],"names":["createStore","GetUsernameFromCoockies","SetBankButton","SetClientsModelButton","SetValuesToRangeFilter","GetData","MutationResponseData","MutationBody","MutationHeaders","defaultOperatorBank","defaultClientType","defaultClientPerPage","actions","setVariablesFromLocalStorage","SetValuesToRangeFilterInstance","set","websocketConnect","ctx","connect_server","username","document","cookie","findUsernameString","url","class_model","console","log","connection","WebSocket","returnUsername","localStorage","getItem","onmessage","event","messageCatch","JSON","parse","data","eventName","operator_id","message","username_id","setItem","InstanceSetBankButton","setButtonStatusFromLocalStorage","InstanceSetClientsModelButton","setButtonStatus","commit","statisticsDataMessage","statistics","mutationClient","client","mutationClientID","id","currentArray","getters","tableBody","indexItem","findIndex","i","MutationResponseDataInstance","mutationEntry","returnEntry","responseHeaders","first","second","third","callback","then","responseData","paginateData","body","paginate_data","responseBody","responseAdditionalComments","additional_comments","responseClientsTypeForOperators","clients_type_for_operators","GetDataInstance","returnSlice","onopen","onclose","setTimeout","timer","location","reload","getDataDRF","MutationBodyInstance","mutationClientsDict","returnMutationDict","MutationHeadersInstance","mutationHeadersDict","mutations","updateFirstTableHeaders","state","firstTableHeadersMessage","firstTableHeadersArray","updateSecondTableHeaders","secondTableHeadersMessage","secondTableHeadersArray","updateThirdTableHeaders","thirdTableHeadersMessage","thirdTableHeadersArray","updateTableBody","tableBodyMessage","tableBodyArray","replaceItemIntoArray","listUpdate","updateAdditionalComments","additionalCommentsMessage","additionalCommentsArray","updateClientsTypeForOperators","clientsTypeForOperatorsMessage","clientsTypeForOperatorsArray","updateStatisticsData","statisticsDataArray","updatePaginateData","paginateDataMessage","paginateDataVariable","updateClientsPerPageData","responseClientsPerPage","clientsPerPage","Number","firstTableHeaders","secondTableHeaders","thirdTableHeaders","additionalComments","clientsTypeForOperators","statisticsData","clientsPerPageData","modules"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,MAA5B;AACA,SAASC,uBAAT,QAAwC,uCAAxC;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,qBAAP,MAAkC,mCAAlC;AACA,SAASC,sBAAT,QAAuC,oCAAvC;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,oBAAT,EAA+BC,YAA/B,EAA6CC,eAA7C,QAAoE,kCAApE;AAEA,IAAMC,mBAAmB,GAAG,UAA5B;AACA,IAAMC,iBAAiB,GAAG,UAA1B;AACA,IAAMC,oBAAoB,GAAG,CAA7B;AAGA,eAAeX,WAAW,CAAC;AACzBY,EAAAA,OAAO,EAAE;AACDC,IAAAA,4BADC,0CAC8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,gBAAAA,8BAD2B,GACM,IAAIV,sBAAJ,EADN;AAEjCU,gBAAAA,8BAA8B,CAACC,GAA/B;;AAFiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGpC,KAJM;AAKDC,IAAAA,gBALC,4BAKgBC,GALhB,EAKqB;AAAA;;AAAA;AAAA,wCAoFfC,cApFe;AAAA;AAAA;AAAA;AAAA;AAoFfA,gBAAAA,cApFe,8BAoFE;AACtB,sBAAIC,QAAQ,GAAG,IAAIlB,uBAAJ,CAA4BmB,QAAQ,CAACC,MAArC,EAA6CC,kBAA7C,EAAf;AACA,sBAAIC,GAAG,oCAA6BC,WAA7B,cAA4CL,QAA5C,MAAP;AACAM,kBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,uBAAKC,UAAL,GAAkB,IAAIC,SAAJ,CAAcL,GAAd,CAAlB;AACH,iBAzFuB;;AACpBJ,gBAAAA,QADoB,GACT,IAAIlB,uBAAJ,CAA4BmB,QAAQ,CAACC,MAArC,EAA6CQ,cAA7C,EADS;AAEpBL,gBAAAA,WAFoB,GAENM,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAFM;;AAIxB,oBAAIP,WAAW,IAAI,IAAnB,EAAwB;AACpBA,kBAAAA,WAAW,GAAGd,iBAAd;AACH;;AAEGa,gBAAAA,GARoB,oCAQYC,WARZ,cAQ2BL,QAR3B;AAUxBM,gBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,gBAAA,KAAI,CAACC,UAAL,GAAkB,IAAIC,SAAJ,CAAcL,GAAd,CAAlB;;AAGA,gBAAA,KAAI,CAACI,UAAL,CAAgBK,SAAhB,GAA4B,UAAUC,KAAV,EAAiB;AACzC,sBAAIC,YAAY,GAAGC,IAAI,CAACC,KAAL,CAAWH,KAAK,CAACI,IAAjB,CAAnB;AACA,sBAAIC,SAAS,GAAGJ,YAAY,CAACD,KAA7B;;AAEA,sBAAIK,SAAS,IAAI,kBAAjB,EAAqC;AACjC,wBAAMC,WAAW,GAAGJ,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACM,OAAxB,EAAiCC,WAArD;AAEArB,oBAAAA,QAAQ,CAACC,MAAT,yBAAiCkB,WAAjC;AACAT,oBAAAA,YAAY,CAACY,OAAb,CAAqB,aAArB,EAAoCH,WAApC;AAEA,wBAAMI,qBAAqB,GAAG,IAAIzC,aAAJ,EAA9B;AACAyC,oBAAAA,qBAAqB,CAACC,+BAAtB,CAAsDnC,mBAAtD;AAEA,wBAAMoC,6BAA6B,GAAG,IAAI1C,qBAAJ,EAAtC;AACA0C,oBAAAA,6BAA6B,CAACC,eAA9B,CAA8CtB,WAA9C;AAGAP,oBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuCpC,oBAAvC;AACH,mBAdD,MAeK,IAAI2B,SAAS,IAAI,4BAAjB,EAA+C;AAChD,wBAAMU,qBAAqB,GAAGb,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACM,OAAxB,EAAiCS,UAA/D;AACAhC,oBAAAA,GAAG,CAAC8B,MAAJ,CAAW,sBAAX,EAAmCC,qBAAnC;AACH,mBAHI,MAIA,IAAIV,SAAS,IAAI,iBAAjB,EAAoC;AACrC,wBAAIY,cAAc,GAAGf,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACM,OAAxB,EAAiCW,MAAtD;AACA,wBAAIC,gBAAgB,GAAGF,cAAc,CAACG,EAAtC;AACA,wBAAIC,YAAY,GAAGrC,GAAG,CAACsC,OAAJ,CAAYC,SAA/B;;AAHqC,+DAIlBF,YAJkB;AAAA;;AAAA;AAAA;AAAA,4BAI5BH,MAJ4B;;AAKjC,4BAAIA,MAAM,CAACE,EAAP,IAAaD,gBAAjB,EAAmC;AAC/B,8BAAIK,SAAS,GAAGH,YAAY,CAACI,SAAb,CAAuB,UAAAC,CAAC;AAAA,mCAAIA,CAAC,IAAIR,MAAT;AAAA,2BAAxB,CAAhB,CAD+B,CAE/B;;AAEA,8BAAMS,4BAA4B,GAAG,IAAItD,oBAAJ,CAAyB4C,cAAzB,CAArC;AACA,8BAAIW,aAAa,GAAGD,4BAA4B,CAACE,WAA7B,CAAyCZ,cAAzC,CAApB;AAEAzB,0BAAAA,OAAO,CAACC,GAAR,CAAYmC,aAAZ;AACA5C,0BAAAA,GAAG,CAAC8B,MAAJ,CAAW,sBAAX,EAAmC,CAACU,SAAD,EAAYP,cAAZ,CAAnC;AACH;AAdgC;;AAIrC,0EAAiC;AAAA;AAWhC;AAfoC;AAAA;AAAA;AAAA;AAAA;AAgBxC,mBAhBI,MAiBA,IAAIZ,SAAS,IAAI,kBAAjB,EAAqC;AACtC,wBAAIyB,eAAe,GAAG5B,IAAI,CAACC,KAAL,CAAWF,YAAY,CAACM,OAAxB,CAAtB;AACAf,oBAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAT,oBAAAA,GAAG,CAAC8B,MAAJ,CAAW,yBAAX,EAAsCgB,eAAe,CAACC,KAAtD;AACA/C,oBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuCgB,eAAe,CAACE,MAAvD;AACAhD,oBAAAA,GAAG,CAAC8B,MAAJ,CAAW,yBAAX,EAAsCgB,eAAe,CAACG,KAAtD;;AAEA,6BAASC,QAAT,CAAmB9B,IAAnB,EAAyB;AACrBA,sBAAAA,IAAI,CAAC+B,IAAL,CAAU,UAAAC,YAAY,EAAI;AACtB,4BAAIC,YAAY,GAAGD,YAAY,CAAChC,IAAb,CAAkBkC,IAAlB,CAAuBC,aAA1C;AACA,4BAAIC,YAAY,GAAGJ,YAAY,CAAChC,IAAb,CAAkBkC,IAAlB,CAAuBA,IAA1C;AACA,4BAAIG,0BAA0B,GAAGL,YAAY,CAAChC,IAAb,CAAkBsC,mBAAnD;AACA,4BAAIC,+BAA+B,GAAGP,YAAY,CAAChC,IAAb,CAAkBwC,0BAAxD;AAEA5D,wBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuCpC,oBAAvC;AACAM,wBAAAA,GAAG,CAAC8B,MAAJ,CAAW,oBAAX,EAAiCuB,YAAjC;AACArD,wBAAAA,GAAG,CAAC8B,MAAJ,CAAW,iBAAX,EAA8B0B,YAA9B;AACAxD,wBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuC2B,0BAAvC;AACAzD,wBAAAA,GAAG,CAAC8B,MAAJ,CAAW,+BAAX,EAA4C6B,+BAA5C;AACH,uBAXD;AAYH;;AACD,wBAAME,eAAe,GAAG,IAAIzE,OAAJ,CAAYM,oBAAZ,CAAxB;AACAwD,oBAAAA,QAAQ,CAACW,eAAe,CAACC,WAAhB,EAAD,CAAR;AACH;AACJ,iBAhED;;AAkEA,gBAAA,KAAI,CAACpD,UAAL,CAAgBqD,MAAhB,GAAyB,UAAU/C,KAAV,EAAiB;AACtCR,kBAAAA,OAAO,CAACC,GAAR,CAAY,mDAAZ;AACC,iBAFL;;AAWA,gBAAA,KAAI,CAACC,UAAL,CAAgBsD,OAAhB,GAA0B,UAAUhD,KAAV,EAAiB;AACvCR,kBAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;;AACA,uBAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AACxBuB,oBAAAA,UAAU,CAAE,SAASC,KAAT,GAAgB;AACxB,0BAAIhE,QAAQ,GAAG,IAAIlB,uBAAJ,CAA4BmB,QAAQ,CAACC,MAArC,EAA6CQ,cAA7C,EAAf;AACA,0BAAIL,WAAW,GAAGM,YAAY,CAACC,OAAb,CAAqB,kBAArB,CAAlB;AACA,0BAAIR,GAAG,oCAA6BC,WAA7B,cAA4CL,QAA5C,MAAP;;AAEA,0BAAIK,WAAW,IAAI,IAAnB,EAAwB;AACpBA,wBAAAA,WAAW,GAAGd,iBAAd;AACH;;AAEDe,sBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA,2BAAKC,UAAL,GAAkB,IAAIC,SAAJ,CAAcL,GAAd,CAAlB;AACH,qBAXS,EAWPoC,CAAC,GAAC,IAXK,CAAV;AAYH;;AACDyB,kBAAAA,QAAQ,CAACC,MAAT;AACH,iBAjBD;;AA3FwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA6G3B,KAlHM;AAmHDC,IAAAA,UAnHC,sBAmHUrE,GAnHV,EAmHe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACZ6D,gBAAAA,eADY,GACM,IAAIzE,OAAJ,CAAYM,oBAAZ,CADN;AAAA;AAAA,uBAEOmE,eAAe,CAACC,WAAhB,EAFP;;AAAA;AAEdV,gBAAAA,YAFc;AAIZkB,gBAAAA,oBAJY,GAIW,IAAIhF,YAAJ,CAAiB8D,YAAjB,CAJX;AAKdmB,gBAAAA,mBALc,GAKQD,oBAAoB,CAACE,kBAArB,EALR;AAOZC,gBAAAA,uBAPY,GAOc,IAAIlF,eAAJ,CAAoB6D,YAApB,CAPd;AAQdsB,gBAAAA,mBARc,GAQQD,uBAAuB,CAACD,kBAAxB,EARR;AAUlBhE,gBAAAA,OAAO,CAACC,GAAR,CAAYiE,mBAAZ;AAIIrB,gBAAAA,YAdc,GAcCD,YAAY,CAAChC,IAAb,CAAkBkC,IAAlB,CAAuBC,aAdxB;AAedC,gBAAAA,YAfc,GAeCe,mBAfD;AAgBdzB,gBAAAA,eAhBc,GAgBI4B,mBAhBJ;AAiBdjB,gBAAAA,0BAjBc,GAiBeL,YAAY,CAAChC,IAAb,CAAkBsC,mBAjBjC;AAkBdC,gBAAAA,+BAlBc,GAkBoBP,YAAY,CAAChC,IAAb,CAAkBwC,0BAlBtC;AAoBlB5D,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuCpC,oBAAvC;AACAM,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,oBAAX,EAAiCuB,YAAjC;AACArD,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,yBAAX,EAAsCgB,eAAe,CAACC,KAAtD;AACA/C,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuCgB,eAAe,CAACE,MAAvD;AACAhD,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,yBAAX,EAAsCgB,eAAe,CAACG,KAAtD;AACAjD,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,iBAAX,EAA8B0B,YAA9B;AACAxD,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,0BAAX,EAAuC2B,0BAAvC;AACAzD,gBAAAA,GAAG,CAAC8B,MAAJ,CAAW,+BAAX,EAA4C6B,+BAA5C;;AA3BkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BrB;AA/IM,GADgB;AAkJzBgB,EAAAA,SAAS,EAAE;AACPC,IAAAA,uBADO,mCACkBC,KADlB,EACyBC,wBADzB,EACmD;AACtDD,MAAAA,KAAK,CAACE,sBAAN,GAA+BD,wBAA/B;AAEH,KAJM;AAKPE,IAAAA,wBALO,oCAKmBH,KALnB,EAK0BI,yBAL1B,EAKqD;AACxDJ,MAAAA,KAAK,CAACK,uBAAN,GAAgCD,yBAAhC;AACH,KAPM;AAQPE,IAAAA,uBARO,mCAQkBN,KARlB,EAQyBO,wBARzB,EAQmD;AACtDP,MAAAA,KAAK,CAACQ,sBAAN,GAA+BD,wBAA/B;AACH,KAVM;AAYPE,IAAAA,eAZO,2BAYUT,KAZV,EAYiBU,gBAZjB,EAYmC;AACtCV,MAAAA,KAAK,CAACW,cAAN,GAAuBD,gBAAvB;AACH,KAdM;AAePE,IAAAA,oBAfO,gCAeeZ,KAff,EAesBa,UAftB,EAekC;AACrCb,MAAAA,KAAK,CAACW,cAAN,CAAqBE,UAAU,CAAC,CAAD,CAA/B,IAAsCA,UAAU,CAAC,CAAD,CAAhD;AACH,KAjBM;AAmBPC,IAAAA,wBAnBO,oCAmBmBd,KAnBnB,EAmB0Be,yBAnB1B,EAmBqD;AACxDf,MAAAA,KAAK,CAACgB,uBAAN,GAAgCD,yBAAhC;AACH,KArBM;AAsBPE,IAAAA,6BAtBO,yCAsBwBjB,KAtBxB,EAsB+BkB,8BAtB/B,EAsB+D;AAClElB,MAAAA,KAAK,CAACmB,4BAAN,GAAqCD,8BAArC;AACH,KAxBM;AA0BPE,IAAAA,oBA1BO,gCA0BepB,KA1Bf,EA0BsB9C,qBA1BtB,EA0B6C;AAChD8C,MAAAA,KAAK,CAACqB,mBAAN,GAA4BnE,qBAA5B;AACH,KA5BM;AA8BPoE,IAAAA,kBA9BO,8BA8BatB,KA9Bb,EA8BoBuB,mBA9BpB,EA8ByC;AAC5CvB,MAAAA,KAAK,CAACwB,oBAAN,GAA6BD,mBAA7B;AACH,KAhCM;AAkCPE,IAAAA,wBAlCO,oCAkCmBzB,KAlCnB,EAkC0B0B,sBAlC1B,EAkCkD;AACrD1B,MAAAA,KAAK,CAAC2B,cAAN,GAAuBD,sBAAvB;AACH;AApCM,GAlJc;AAyLzB1B,EAAAA,KAAK,EAAE;AACHE,IAAAA,sBAAsB,EAAE,EADrB;AAEHG,IAAAA,uBAAuB,EAAE,EAFtB;AAGHG,IAAAA,sBAAsB,EAAE,EAHrB;AAIHG,IAAAA,cAAc,EAAE,EAJb;AAKHK,IAAAA,uBAAuB,EAAE,EALtB;AAMHG,IAAAA,4BAA4B,EAAE,EAN3B;AAOHE,IAAAA,mBAAmB,EAAE,EAPlB;AAQHG,IAAAA,oBAAoB,EAAEI,MAAM,EARzB;AASHD,IAAAA,cAAc,EAAEC,MAAM;AATnB,GAzLkB;AAoMzBnE,EAAAA,OAAO,EAAE;AACLoE,IAAAA,iBADK,6BACa7B,KADb,EACoB;AACrB,aAAOA,KAAK,CAACE,sBAAb;AACH,KAHI;AAIL4B,IAAAA,kBAJK,8BAIc9B,KAJd,EAIqB;AACtB,aAAOA,KAAK,CAACK,uBAAb;AACH,KANI;AAOL0B,IAAAA,iBAPK,6BAOa/B,KAPb,EAOoB;AACrB,aAAOA,KAAK,CAACQ,sBAAb;AACH,KATI;AAWL9C,IAAAA,SAXK,qBAWKsC,KAXL,EAWY;AACb,aAAOA,KAAK,CAACW,cAAb;AACH,KAbI;AAeLqB,IAAAA,kBAfK,8BAechC,KAfd,EAeqB;AACtB,aAAOA,KAAK,CAACgB,uBAAb;AACH,KAjBI;AAkBLiB,IAAAA,uBAlBK,mCAkBmBjC,KAlBnB,EAkB0B;AAC3B,aAAOA,KAAK,CAACmB,4BAAb;AACH,KApBI;AAqBLe,IAAAA,cArBK,0BAqBUlC,KArBV,EAqBiB;AAClB,aAAOA,KAAK,CAACqB,mBAAb;AACH,KAvBI;AAwBL7C,IAAAA,YAxBK,wBAwBQwB,KAxBR,EAwBe;AAChB,aAAOA,KAAK,CAACwB,oBAAb;AACH,KA1BI;AA2BLW,IAAAA,kBA3BK,8BA2BcnC,KA3Bd,EA2BqB;AACtB,aAAOA,KAAK,CAAC2B,cAAb;AACH;AA7BI,GApMgB;AAoOzBS,EAAAA,OAAO,EAAE;AApOgB,CAAD,CAA1B","sourcesContent":["import { createStore } from 'vuex'\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\nimport SetBankButton from '@/assets/set_bank_button.js'\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\nimport { SetValuesToRangeFilter } from '@/assets/setVariablesToOperator.js'\nimport { GetData } from '@/assets/FetchRequest.js'\nimport { MutationResponseData, MutationBody, MutationHeaders } from '@/assets/mutationResponseData.js'\n\nconst defaultOperatorBank = 'alfabank'\nconst defaultClientType = 'novoregi'\nconst defaultClientPerPage = 2\n\n\nexport default createStore({\n  actions: {\n    async setVariablesFromLocalStorage() {\n        const SetValuesToRangeFilterInstance = new SetValuesToRangeFilter()\n        SetValuesToRangeFilterInstance.set()\n    },\n    async websocketConnect(ctx) {\n        let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\n        let class_model = localStorage.getItem('user_class_model')\n\n        if (class_model == null){\n            class_model = defaultClientType\n        }\n        \n        let url = `ws://localhost:8000/ws/${class_model}/${username}/`\n    \n        console.log('Starting connection to WebSocket Server')\n        this.connection = new WebSocket(url)\n\n\n        this.connection.onmessage = function (event) {\n            let messageCatch = JSON.parse(event.data)\n            let eventName = messageCatch.event\n\n            if (eventName == 'operator_connect') {\n                const operator_id = JSON.parse(messageCatch.message).username_id\n\n                document.cookie = `username_id=${operator_id}; secure`\n                localStorage.setItem('username_id', operator_id)\n\n                const InstanceSetBankButton = new SetBankButton()\n                InstanceSetBankButton.setButtonStatusFromLocalStorage(defaultOperatorBank)\n\n                const InstanceSetClientsModelButton = new SetClientsModelButton()\n                InstanceSetClientsModelButton.setButtonStatus(class_model)\n\n                \n                ctx.commit('updateClientsPerPageData', defaultClientPerPage)\n            }\n            else if (eventName == 'send_non_called_statistics') {\n                const statisticsDataMessage = JSON.parse(messageCatch.message).statistics\n                ctx.commit('updateStatisticsData', statisticsDataMessage)\n            }\n            else if (eventName == 'client_mutation') {\n                let mutationClient = JSON.parse(messageCatch.message).client\n                let mutationClientID = mutationClient.id\n                let currentArray = ctx.getters.tableBody\n                for (let client of currentArray) {\n                    if (client.id == mutationClientID) {\n                        let indexItem = currentArray.findIndex(i => i == client)\n                        // console.log(mutationClient)\n\n                        const MutationResponseDataInstance = new MutationResponseData(mutationClient)\n                        let mutationEntry = MutationResponseDataInstance.returnEntry(mutationClient)\n\n                        console.log(mutationEntry)\n                        ctx.commit('replaceItemIntoArray', [indexItem, mutationClient])\n                    }\n                }\n            }\n            else if (eventName == 'headers_mutation') {\n                let responseHeaders = JSON.parse(messageCatch.message)\n                console.log('headers_mutation')\n                ctx.commit('updateFirstTableHeaders', responseHeaders.first)\n                ctx.commit('updateSecondTableHeaders', responseHeaders.second)\n                ctx.commit('updateThirdTableHeaders', responseHeaders.third)\n\n                function callback (data) {\n                    data.then(responseData => {\n                        let paginateData = responseData.data.body.paginate_data\n                        let responseBody = responseData.data.body.body\n                        let responseAdditionalComments = responseData.data.additional_comments\n                        let responseClientsTypeForOperators = responseData.data.clients_type_for_operators\n                        \n                        ctx.commit('updateClientsPerPageData', defaultClientPerPage)\n                        ctx.commit('updatePaginateData', paginateData)\n                        ctx.commit('updateTableBody', responseBody)\n                        ctx.commit('updateAdditionalComments', responseAdditionalComments)\n                        ctx.commit('updateClientsTypeForOperators', responseClientsTypeForOperators)\n                    })\n                }\n                const GetDataInstance = new GetData(defaultClientPerPage)\n                callback(GetDataInstance.returnSlice())\n            }\n        }\n        \n        this.connection.onopen = function (event) {\n            console.log('Successfully connected to first channel websocket')\n            }\n        \n        function connect_server() {\n            let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\n            let url = `ws://localhost:8000/ws/${class_model}/${username}/`\n            console.log('Starting connection to WebSocket Server')\n            this.connection = new WebSocket(url);\n        }\n\n        this.connection.onclose = function (event) {\n            console.log('Disconnect! Start connection')\n            for (var i = 0; i < 3; i++) {\n                setTimeout( function timer(){\n                    let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\n                    let class_model = localStorage.getItem('user_class_model')\n                    let url = `ws://localhost:8000/ws/${class_model}/${username}/`\n\n                    if (class_model == null){\n                        class_model = defaultClientType\n                    }\n\n                    console.log('Starting connection to WebSocket Server')\n                    this.connection = new WebSocket(url);\n                }, i*3000 );\n            }\n            location.reload()\n        }\n    },\n    async getDataDRF(ctx) {\n        const GetDataInstance = new GetData(defaultClientPerPage)\n        let responseData = await GetDataInstance.returnSlice()\n\n        const MutationBodyInstance = new MutationBody(responseData)\n        let mutationClientsDict = MutationBodyInstance.returnMutationDict()\n\n        const MutationHeadersInstance = new MutationHeaders(responseData)\n        let mutationHeadersDict = MutationHeadersInstance.returnMutationDict()\n\n        console.log(mutationHeadersDict)\n\n\n\n        let paginateData = responseData.data.body.paginate_data\n        let responseBody = mutationClientsDict\n        let responseHeaders = mutationHeadersDict\n        let responseAdditionalComments = responseData.data.additional_comments\n        let responseClientsTypeForOperators = responseData.data.clients_type_for_operators\n        \n        ctx.commit('updateClientsPerPageData', defaultClientPerPage)\n        ctx.commit('updatePaginateData', paginateData)\n        ctx.commit('updateFirstTableHeaders', responseHeaders.first)\n        ctx.commit('updateSecondTableHeaders', responseHeaders.second)\n        ctx.commit('updateThirdTableHeaders', responseHeaders.third)\n        ctx.commit('updateTableBody', responseBody)\n        ctx.commit('updateAdditionalComments', responseAdditionalComments)\n        ctx.commit('updateClientsTypeForOperators', responseClientsTypeForOperators)\n    },\n  },\n  mutations: {\n      updateFirstTableHeaders (state, firstTableHeadersMessage) {\n          state.firstTableHeadersArray = firstTableHeadersMessage\n          \n      },\n      updateSecondTableHeaders (state, secondTableHeadersMessage) {\n          state.secondTableHeadersArray = secondTableHeadersMessage\n      },\n      updateThirdTableHeaders (state, thirdTableHeadersMessage) {\n          state.thirdTableHeadersArray = thirdTableHeadersMessage\n      },\n\n      updateTableBody (state, tableBodyMessage) {\n          state.tableBodyArray = tableBodyMessage\n      },\n      replaceItemIntoArray (state, listUpdate) {\n          state.tableBodyArray[listUpdate[0]] = listUpdate[1]\n      },\n\n      updateAdditionalComments (state, additionalCommentsMessage) {\n          state.additionalCommentsArray = additionalCommentsMessage\n      },\n      updateClientsTypeForOperators (state, clientsTypeForOperatorsMessage) {\n          state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage\n      },\n\n      updateStatisticsData (state, statisticsDataMessage) {\n          state.statisticsDataArray = statisticsDataMessage\n      },\n\n      updatePaginateData (state, paginateDataMessage) {\n          state.paginateDataVariable = paginateDataMessage\n      },\n\n      updateClientsPerPageData (state, responseClientsPerPage) {\n          state.clientsPerPage = responseClientsPerPage\n      }\n      \n  },\n  state: {\n      firstTableHeadersArray: [],\n      secondTableHeadersArray: [],\n      thirdTableHeadersArray: [],\n      tableBodyArray: [],\n      additionalCommentsArray: [],\n      clientsTypeForOperatorsArray: [],\n      statisticsDataArray: [],\n      paginateDataVariable: Number(),\n      clientsPerPage: Number()\n  },\n  getters: {\n      firstTableHeaders(state) {\n          return state.firstTableHeadersArray\n      },\n      secondTableHeaders(state) {\n          return state.secondTableHeadersArray\n      },\n      thirdTableHeaders(state) {\n          return state.thirdTableHeadersArray\n      },\n\n      tableBody(state) {\n          return state.tableBodyArray\n      },\n\n      additionalComments(state) {\n          return state.additionalCommentsArray\n      },\n      clientsTypeForOperators(state) {\n          return state.clientsTypeForOperatorsArray\n      },\n      statisticsData(state) {\n          return state.statisticsDataArray\n      },\n      paginateData(state) {\n          return state.paginateDataVariable\n      },\n      clientsPerPageData(state) {\n          return state.clientsPerPage\n      }\n\n  },\n  modules: {}\n})\n"]},"metadata":{},"sourceType":"module"}