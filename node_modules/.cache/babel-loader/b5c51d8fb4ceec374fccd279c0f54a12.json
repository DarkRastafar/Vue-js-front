{"ast":null,"code":"import _asyncToGenerator from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport App from './App.vue';\nimport router from './router';\nimport Paginate from \"vuejs-paginate-next\";\nimport \"@/assets/css/table.css\";\nimport vSelect from \"vue-select\";\nimport \"vue-select/dist/vue-select.css\";\nimport SetWorkStatus from '@/assets/set_work_status.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nimport { SetvaluesToRangeFilter } from '@/assets/se';\nimport { GetData } from '@/assets/FetchRequest.js';\nvar defaultClientType = 'novoregi';\nvar store = createStore({\n  actions: {\n    setVariablesFromLocalStorage: function setVariablesFromLocalStorage() {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var SetvaluesToRangeFilterInstance;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                SetvaluesToRangeFilterInstance = new SetvaluesToRangeFilter();\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    getDataDRF: function getDataDRF(ctx) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var GetDataInstance, test_response;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                GetDataInstance = new GetData();\n                _context2.next = 3;\n                return GetDataInstance.returnSlice();\n\n              case 3:\n                test_response = _context2.sent;\n                console.log(test_response);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    websocketConnect: function websocketConnect(ctx) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var username, class_model, url, connect_server;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                connect_server = function _connect_server() {\n                  var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                  var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                  console.log('Starting connection to WebSocket Server');\n                  this.connection = new WebSocket(url);\n                };\n\n                username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                class_model = localStorage.getItem('user_class_model');\n\n                if (class_model == null) {\n                  class_model = defaultClientType;\n                }\n\n                url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                console.log('Starting connection to WebSocket Server');\n                _this.connection = new WebSocket(url);\n\n                _this.connection.onmessage = function (event) {\n                  var messageCatch = JSON.parse(event.data);\n\n                  if (JSON.parse(messageCatch.message).username_id !== undefined) {\n                    var operator_id = JSON.parse(messageCatch.message).username_id;\n                    document.cookie = \"username_id=\".concat(operator_id, \"; secure\");\n                    localStorage.setItem('username_id', operator_id);\n                    var InstanceSetWorkStatus = new SetWorkStatus(messageCatch);\n                    InstanceSetWorkStatus.setStatus();\n                    var InstanceSetBankButton = new SetBankButton();\n                    InstanceSetBankButton.setButtonStatus(messageCatch);\n                    var InstanceSetClientsModelButton = new SetClientsModelButton();\n                    InstanceSetClientsModelButton.setButtonStatus(class_model);\n                  } else if (JSON.parse(messageCatch.message).headers !== undefined) {\n                    var tableHeadersMessage = JSON.parse(messageCatch.message).headers;\n                    var tableBodyMessage = JSON.parse(messageCatch.message).body.body;\n                    var additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments;\n                    var clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators;\n                    ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first);\n                    ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second);\n                    ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third);\n                    ctx.commit('updateTableBody', tableBodyMessage);\n                    ctx.commit('updateAdditionalComments', additionalCommentsMessage);\n                    ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage);\n                  } else if (JSON.parse(messageCatch.message).statistics !== undefined) {\n                    console.log(JSON.parse(messageCatch.message));\n                    var statisticsDataMessage = JSON.parse(messageCatch.message).statistics;\n                    ctx.commit('updateStatisticsData', statisticsDataMessage);\n                  }\n                };\n\n                _this.connection.onopen = function (event) {\n                  console.log('Successfully connected to first channel websocket');\n                };\n\n                _this.connection.onclose = function (event) {\n                  console.log('Disconnect! Start connection');\n\n                  for (var i = 0; i < 3; i++) {\n                    setTimeout(function timer() {\n                      var username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                      var class_model = localStorage.getItem('user_class_model');\n                      var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n\n                      if (class_model == null) {\n                        class_model = defaultClientType;\n                      }\n\n                      console.log('Starting connection to WebSocket Server');\n                      this.connection = new WebSocket(url);\n                    }, i * 3000);\n                  }\n\n                  location.reload();\n                };\n\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  },\n  mutations: {\n    updateFirstTableHeaders: function updateFirstTableHeaders(state, firstTableHeadersMessage) {\n      state.firstTableHeadersArray = firstTableHeadersMessage;\n    },\n    updateSecondTableHeaders: function updateSecondTableHeaders(state, secondTableHeadersMessage) {\n      state.secondTableHeadersArray = secondTableHeadersMessage;\n    },\n    updateThirdTableHeaders: function updateThirdTableHeaders(state, thirdTableHeadersMessage) {\n      state.thirdTableHeadersArray = thirdTableHeadersMessage;\n    },\n    updateTableBody: function updateTableBody(state, tableBodyMessage) {\n      state.tableBodyArray = tableBodyMessage;\n    },\n    updateAdditionalComments: function updateAdditionalComments(state, additionalCommentsMessage) {\n      state.additionalCommentsArray = additionalCommentsMessage;\n    },\n    updateClientsTypeForOperators: function updateClientsTypeForOperators(state, clientsTypeForOperatorsMessage) {\n      state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage;\n    },\n    updateStatisticsData: function updateStatisticsData(state, statisticsDataMessage) {\n      state.statisticsDataArray = statisticsDataMessage;\n    }\n  },\n  state: {\n    firstTableHeadersArray: [],\n    secondTableHeadersArray: [],\n    thirdTableHeadersArray: [],\n    tableBodyArray: [],\n    additionalCommentsArray: [],\n    clientsTypeForOperatorsArray: [],\n    statisticsDataArray: []\n  },\n  getters: {\n    firstTableHeaders: function firstTableHeaders(state) {\n      return state.firstTableHeadersArray;\n    },\n    secondTableHeaders: function secondTableHeaders(state) {\n      return state.secondTableHeadersArray;\n    },\n    thirdTableHeaders: function thirdTableHeaders(state) {\n      return state.thirdTableHeadersArray;\n    },\n    tableBody: function tableBody(state) {\n      return state.tableBodyArray;\n    },\n    additionalComments: function additionalComments(state) {\n      return state.additionalCommentsArray;\n    },\n    clientsTypeForOperators: function clientsTypeForOperators(state) {\n      return state.clientsTypeForOperatorsArray;\n    },\n    statisticsData: function statisticsData(state) {\n      return state.statisticsDataArray;\n    }\n  },\n  modules: {}\n});\nvar app = createApp(App);\napp.use(vSelect);\napp.use(store);\napp.use(router);\napp.use(Paginate);\napp.mount('#app'); // updateHeaders (state, tableHeadersMessage) {\n//     state.tableHeadersArray = tableHeadersMessage\n// },\n// updateClients (state, tableBodyMessage) {\n//     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\n//         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\n//             return 1;\n//           }\n//           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\n//             return -1;\n//           }\n//           return 0;\n//     })\n// },\n// updateDropDownCommentsArray (state, dropDownCommentsMessage) {\n//     state.dropDownCommentsArray = dropDownCommentsMessage\n// },\n// updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\n//     state.dropDownCityAlfabank = dropDownCityAlfabank\n// },","map":{"version":3,"sources":["C:/current_front/src/main.js"],"names":["createApp","createStore","GetUsernameFromCoockies","App","router","Paginate","vSelect","SetWorkStatus","SetBankButton","SetClientsModelButton","SetvaluesToRangeFilter","GetData","defaultClientType","store","actions","setVariablesFromLocalStorage","SetvaluesToRangeFilterInstance","getDataDRF","ctx","GetDataInstance","returnSlice","test_response","console","log","websocketConnect","connect_server","username","document","cookie","findUsernameString","url","class_model","connection","WebSocket","returnUsername","localStorage","getItem","onmessage","event","messageCatch","JSON","parse","data","message","username_id","undefined","operator_id","setItem","InstanceSetWorkStatus","setStatus","InstanceSetBankButton","setButtonStatus","InstanceSetClientsModelButton","headers","tableHeadersMessage","tableBodyMessage","body","additionalCommentsMessage","additional_comments","clientsTypeForOperatorsMessage","clients_type_for_operators","commit","first","second","third","statistics","statisticsDataMessage","onopen","onclose","i","setTimeout","timer","location","reload","mutations","updateFirstTableHeaders","state","firstTableHeadersMessage","firstTableHeadersArray","updateSecondTableHeaders","secondTableHeadersMessage","secondTableHeadersArray","updateThirdTableHeaders","thirdTableHeadersMessage","thirdTableHeadersArray","updateTableBody","tableBodyArray","updateAdditionalComments","additionalCommentsArray","updateClientsTypeForOperators","clientsTypeForOperatorsArray","updateStatisticsData","statisticsDataArray","getters","firstTableHeaders","secondTableHeaders","thirdTableHeaders","tableBody","additionalComments","clientsTypeForOperators","statisticsData","modules","app","use","mount"],"mappings":"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","sourcesContent":["import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport Paginate from \"vuejs-paginate-next\";\r\nimport \"@/assets/css/table.css\"\r\nimport vSelect from \"vue-select\";\r\nimport \"vue-select/dist/vue-select.css\";\r\n\r\nimport SetWorkStatus from '@/assets/set_work_status.js'\r\nimport SetBankButton from '@/assets/set_bank_button.js'\r\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\r\nimport { SetvaluesToRangeFilter } from '@/assets/se'\r\nimport { GetData } from '@/assets/FetchRequest.js'\r\n\r\n\r\nconst defaultClientType = 'novoregi'\r\n\r\n\r\nconst store = createStore({\r\n    actions: {\r\n        async setVariablesFromLocalStorage() {\r\n            const SetvaluesToRangeFilterInstance = new SetvaluesToRangeFilter()\r\n        },\r\n        async getDataDRF(ctx) {\r\n            const GetDataInstance = new GetData()\r\n            let test_response = await GetDataInstance.returnSlice()\r\n            console.log(test_response)\r\n        },\r\n        async websocketConnect(ctx) {\r\n            let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\r\n            let class_model = localStorage.getItem('user_class_model')\r\n\r\n            if (class_model == null){\r\n                class_model = defaultClientType\r\n            }\r\n            \r\n            let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n        \r\n            console.log('Starting connection to WebSocket Server')\r\n            this.connection = new WebSocket(url)\r\n\r\n\r\n            this.connection.onmessage = function (event) {\r\n                let messageCatch = JSON.parse(event.data)\r\n                \r\n                if (JSON.parse(messageCatch.message).username_id !== undefined) {\r\n                    const operator_id = JSON.parse(messageCatch.message).username_id\r\n\r\n                    document.cookie = `username_id=${operator_id}; secure`\r\n                    localStorage.setItem('username_id', operator_id)\r\n\r\n                    const InstanceSetWorkStatus = new SetWorkStatus(messageCatch)\r\n                    InstanceSetWorkStatus.setStatus()\r\n\r\n                    const InstanceSetBankButton = new SetBankButton()\r\n                    InstanceSetBankButton.setButtonStatus(messageCatch)\r\n\r\n                    const InstanceSetClientsModelButton = new SetClientsModelButton()\r\n                    InstanceSetClientsModelButton.setButtonStatus(class_model)\r\n                }\r\n                else if (JSON.parse(messageCatch.message).headers !== undefined) {\r\n                    const tableHeadersMessage = JSON.parse(messageCatch.message).headers\r\n                    const tableBodyMessage = JSON.parse(messageCatch.message).body.body\r\n                    const additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments\r\n                    const clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators\r\n\r\n                    ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\r\n                    ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\r\n                    ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\r\n                    ctx.commit('updateTableBody', tableBodyMessage)\r\n                    ctx.commit('updateAdditionalComments', additionalCommentsMessage)\r\n                    ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage)\r\n                }\r\n                else if (JSON.parse(messageCatch.message).statistics !== undefined) {\r\n                    console.log(JSON.parse(messageCatch.message))\r\n\r\n                    const statisticsDataMessage = JSON.parse(messageCatch.message).statistics\r\n                    ctx.commit('updateStatisticsData', statisticsDataMessage)\r\n                }          \r\n            }\r\n            \r\n            this.connection.onopen = function (event) {\r\n                console.log('Successfully connected to first channel websocket')\r\n                }\r\n            \r\n            function connect_server() {\r\n                let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n                console.log('Starting connection to WebSocket Server')\r\n                this.connection = new WebSocket(url);\r\n            }\r\n\r\n            this.connection.onclose = function (event) {\r\n                console.log('Disconnect! Start connection')\r\n                for (var i = 0; i < 3; i++) {\r\n                    setTimeout( function timer(){\r\n                        let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\r\n                        let class_model = localStorage.getItem('user_class_model')\r\n                        let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n\r\n                        if (class_model == null){\r\n                            class_model = defaultClientType\r\n                        }\r\n\r\n                        console.log('Starting connection to WebSocket Server')\r\n                        this.connection = new WebSocket(url);\r\n                    }, i*3000 );\r\n                }\r\n                location.reload()\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        updateFirstTableHeaders (state, firstTableHeadersMessage) {\r\n            state.firstTableHeadersArray = firstTableHeadersMessage\r\n            \r\n        },\r\n        updateSecondTableHeaders (state, secondTableHeadersMessage) {\r\n            state.secondTableHeadersArray = secondTableHeadersMessage\r\n        },\r\n        updateThirdTableHeaders (state, thirdTableHeadersMessage) {\r\n            state.thirdTableHeadersArray = thirdTableHeadersMessage\r\n        },\r\n\r\n        updateTableBody (state, tableBodyMessage) {\r\n            state.tableBodyArray = tableBodyMessage\r\n        },\r\n\r\n        updateAdditionalComments (state, additionalCommentsMessage) {\r\n            state.additionalCommentsArray = additionalCommentsMessage\r\n        },\r\n        updateClientsTypeForOperators (state, clientsTypeForOperatorsMessage) {\r\n            state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage\r\n        },\r\n\r\n        updateStatisticsData (state, statisticsDataMessage) {\r\n            state.statisticsDataArray = statisticsDataMessage\r\n        }\r\n        \r\n    },\r\n    state: {\r\n        firstTableHeadersArray: [],\r\n        secondTableHeadersArray: [],\r\n        thirdTableHeadersArray: [],\r\n        tableBodyArray: [],\r\n        additionalCommentsArray: [],\r\n        clientsTypeForOperatorsArray: [],\r\n        statisticsDataArray: []\r\n    },\r\n    getters: {\r\n        firstTableHeaders(state) {\r\n            return state.firstTableHeadersArray\r\n        },\r\n        secondTableHeaders(state) {\r\n            return state.secondTableHeadersArray\r\n        },\r\n        thirdTableHeaders(state) {\r\n            return state.thirdTableHeadersArray\r\n        },\r\n\r\n        tableBody(state) {\r\n            return state.tableBodyArray\r\n        },\r\n\r\n        additionalComments(state) {\r\n            return state.additionalCommentsArray\r\n        },\r\n        clientsTypeForOperators(state) {\r\n            return state.clientsTypeForOperatorsArray\r\n        },\r\n        statisticsData(state) {\r\n            return state.statisticsDataArray\r\n        },\r\n\r\n    },\r\n    modules: {}\r\n})\r\n\r\n\r\nconst app = createApp(App);\r\napp.use(vSelect)\r\napp.use(store)\r\napp.use(router)\r\napp.use(Paginate)\r\napp.mount('#app')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// updateHeaders (state, tableHeadersMessage) {\r\n        //     state.tableHeadersArray = tableHeadersMessage\r\n        // },\r\n// updateClients (state, tableBodyMessage) {\r\n        //     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\r\n        //         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\r\n        //             return 1;\r\n        //           }\r\n        //           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\r\n        //             return -1;\r\n        //           }\r\n        //           return 0;\r\n        //     })\r\n        // },\r\n        // updateDropDownCommentsArray (state, dropDownCommentsMessage) {\r\n        //     state.dropDownCommentsArray = dropDownCommentsMessage\r\n        // },\r\n        // updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\r\n        //     state.dropDownCityAlfabank = dropDownCityAlfabank\r\n        // },"]},"metadata":{},"sourceType":"module"}