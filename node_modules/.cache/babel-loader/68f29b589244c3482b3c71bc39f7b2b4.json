{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _inherits from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { checkAlfabank, returnFirstColField, returnSecondColField, returnThirdColField, returnColFields } from '@/assets/configs/colConfig.js';\n\nvar MutationResponseData = /*#__PURE__*/function () {\n  function MutationResponseData(responseData) {\n    _classCallCheck(this, MutationResponseData);\n\n    this.data = responseData;\n  }\n\n  _createClass(MutationResponseData, [{\n    key: \"getBank\",\n    value: function getBank() {\n      return localStorage.getItem('bank');\n    }\n  }, {\n    key: \"returnEntry\",\n    value: function returnEntry(entry) {\n      var mutationEntry = {};\n      var bank_name = checkAlfabank(this.getBank());\n      var metaFieldsArray = returnColFields(bank_name);\n\n      for (var _i = 0, _Object$entries = Object.entries(entry); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (metaFieldsArray.includes(key)) {\n          mutationEntry[key.replace(\"\".concat(bank_name, \"_\"), '')] = value;\n        }\n      }\n\n      return mutationEntry;\n    }\n  }, {\n    key: \"returnEntryHeaders\",\n    value: function returnEntryHeaders(entry, metaFieldsArray) {\n      var mutationEntry = {};\n\n      for (var _i2 = 0, _Object$entries2 = Object.entries(entry); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            key = _Object$entries2$_i[0],\n            value = _Object$entries2$_i[1];\n\n        if (metaFieldsArray.includes(entry.key)) {\n          mutationEntry[entry.key] = entry.value;\n        }\n      }\n\n      return mutationEntry;\n    }\n  }]);\n\n  return MutationResponseData;\n}();\n\nvar MutationBody = /*#__PURE__*/function (_MutationResponseData) {\n  _inherits(MutationBody, _MutationResponseData);\n\n  var _super = _createSuper(MutationBody);\n\n  function MutationBody(responseData) {\n    var _this;\n\n    _classCallCheck(this, MutationBody);\n\n    _this = _super.call(this, responseData);\n    _this.bodyData = _this.data.data.body.body;\n    return _this;\n  }\n\n  _createClass(MutationBody, [{\n    key: \"returnMutationDict\",\n    value: function returnMutationDict() {\n      var resultClientsList = [];\n\n      var _iterator = _createForOfIteratorHelper(this.bodyData),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var client = _step.value;\n          var mutationClient = this.returnEntry(client);\n          resultClientsList.push(mutationClient);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return resultClientsList;\n    }\n  }]);\n\n  return MutationBody;\n}(MutationResponseData);\n\nfunction crutchForHeaders(bank, headers) {\n  if (bank == 'tochka') {\n    var tochkaBankResponseDict = {\n      'key': 'tochka_bank_response',\n      'value': 'Ответ банка Точка'\n    };\n    headers.first.push(tochkaBankResponseDict);\n  } else if (bank == 'module') {\n    moduleStatusInnDict = {\n      'key': 'module_status_inn',\n      'value': 'Статус ИНН Модуль'\n    };\n    headers.first.splice(1, 0, moduleStatusInnDict);\n  }\n\n  return headers;\n}\n\nvar MutationHeaders = /*#__PURE__*/function (_MutationResponseData2) {\n  _inherits(MutationHeaders, _MutationResponseData2);\n\n  var _super2 = _createSuper(MutationHeaders);\n\n  function MutationHeaders(responseData) {\n    var _this2;\n\n    _classCallCheck(this, MutationHeaders);\n\n    _this2 = _super2.call(this, responseData);\n    _this2.headersData = _this2.data.data.headers;\n    return _this2;\n  }\n\n  _createClass(MutationHeaders, [{\n    key: \"returnMutationOneDict\",\n    value: function returnMutationOneDict(metaFieldsArray) {\n      var resultHeadersList = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.headersData.first),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var headers = _step2.value;\n          var mutationHeaders = this.returnEntryHeaders(headers, metaFieldsArray);\n\n          if (Object.keys(mutationHeaders).length) {\n            for (var _i3 = 0, _Object$entries3 = Object.entries(mutationHeaders); _i3 < _Object$entries3.length; _i3++) {\n              var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n                  key = _Object$entries3$_i[0],\n                  value = _Object$entries3$_i[1];\n\n              var mutationEntryInstance = {\n                'key': key,\n                'value': value\n              };\n              resultHeadersList.push(mutationEntryInstance);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return resultHeadersList;\n    }\n  }, {\n    key: \"returnMutationDict\",\n    value: function returnMutationDict() {\n      var bank_name = checkAlfabank(this.getBank());\n      var firstFieldsArray = returnFirstColField(bank_name);\n      var secondFieldsArray = returnSecondColField(bank_name);\n      var thirdFieldsArray = returnThirdColField(bank_name);\n      var mutationHeadersDict = {\n        'first': this.returnMutationOneDict(firstFieldsArray),\n        'second': this.returnMutationOneDict(secondFieldsArray),\n        'third': this.returnMutationOneDict(thirdFieldsArray)\n      };\n      mutationHeadersDict = crutchForHeaders(bank_name, mutationHeadersDict);\n      return mutationHeadersDict;\n    }\n  }]);\n\n  return MutationHeaders;\n}(MutationResponseData);\n\nexport { MutationResponseData, MutationBody, MutationHeaders };","map":{"version":3,"sources":["C:/Vue-js-front-1/src/assets/mutationResponseData.js"],"names":["checkAlfabank","returnFirstColField","returnSecondColField","returnThirdColField","returnColFields","MutationResponseData","responseData","data","localStorage","getItem","entry","mutationEntry","bank_name","getBank","metaFieldsArray","Object","entries","key","value","includes","replace","MutationBody","bodyData","body","resultClientsList","client","mutationClient","returnEntry","push","crutchForHeaders","bank","headers","tochkaBankResponseDict","first","moduleStatusInnDict","splice","MutationHeaders","headersData","resultHeadersList","mutationHeaders","returnEntryHeaders","keys","length","mutationEntryInstance","firstFieldsArray","secondFieldsArray","thirdFieldsArray","mutationHeadersDict","returnMutationOneDict"],"mappings":"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","sourcesContent":["import { checkAlfabank, returnFirstColField, \n    returnSecondColField, returnThirdColField, returnColFields } from '@/assets/configs/colConfig.js'\n\n\nclass MutationResponseData {\n    constructor (responseData) {\n        this.data = responseData\n    }\n\n    getBank() {\n        return localStorage.getItem('bank')\n    }\n\n    returnEntry (entry) {\n        let mutationEntry = {}\n        let bank_name = checkAlfabank(this.getBank())\n        let metaFieldsArray = returnColFields(bank_name)\n\n        for (const [key, value] of Object.entries(entry)) {\n            if (metaFieldsArray.includes(key)) {\n                mutationEntry[key.replace(`${bank_name}_`, '')] = value\n            }\n        }\n        return mutationEntry\n    }\n\n    returnEntryHeaders (entry, metaFieldsArray) {\n        let mutationEntry = {}\n        for (const [key, value] of Object.entries(entry)) {\n            if (metaFieldsArray.includes(entry.key)) {\n                mutationEntry[entry.key] = entry.value\n            }\n        }\n        return mutationEntry\n    }\n}\n\n\nclass MutationBody extends MutationResponseData {\n    constructor (responseData) {\n        super(responseData);\n        this.bodyData = this.data.data.body.body\n    }\n\n    returnMutationDict () {\n        let resultClientsList = []\n\n        for (let client of this.bodyData) {\n            let mutationClient = this.returnEntry(client)\n            resultClientsList.push(mutationClient)\n        }\n        return resultClientsList\n    }\n}\n\n\nfunction crutchForHeaders(bank, headers){\n    if (bank == 'tochka') {\n        let tochkaBankResponseDict = {'key': 'tochka_bank_response', 'value': 'Ответ банка Точка'}\n        headers.first.push(tochkaBankResponseDict)\n    }\n    else if (bank == 'module'){\n        moduleStatusInnDict = {'key': 'module_status_inn', 'value': 'Статус ИНН Модуль'}\n        headers.first.splice(1, 0, moduleStatusInnDict)\n    }\n    return headers\n}\n\nclass MutationHeaders extends MutationResponseData {\n    constructor (responseData) {\n        super(responseData);\n        this.headersData = this.data.data.headers\n    }\n\n    returnMutationOneDict (metaFieldsArray) {\n        \n        let resultHeadersList = []\n        for (let headers of this.headersData.first) {\n            let mutationHeaders = this.returnEntryHeaders(headers, metaFieldsArray)\n            if (Object.keys(mutationHeaders).length) {\n                for (const [key, value] of Object.entries(mutationHeaders)) {\n                    let mutationEntryInstance = {'key': key, 'value': value}\n                    resultHeadersList.push(mutationEntryInstance)\n                }\n            }\n        }\n        return resultHeadersList\n    }\n\n    returnMutationDict () {\n        let bank_name = checkAlfabank(this.getBank())\n        let firstFieldsArray = returnFirstColField(bank_name)\n        let secondFieldsArray = returnSecondColField(bank_name)\n        let thirdFieldsArray = returnThirdColField(bank_name)\n        \n        let mutationHeadersDict = {\n            'first': this.returnMutationOneDict (firstFieldsArray),\n            'second': this.returnMutationOneDict (secondFieldsArray),\n            'third': this.returnMutationOneDict (thirdFieldsArray)\n        }\n        mutationHeadersDict = crutchForHeaders(bank_name, mutationHeadersDict)\n        return mutationHeadersDict\n    }\n}\n\n\nexport { MutationResponseData, MutationBody, MutationHeaders };"]},"metadata":{},"sourceType":"module"}