{"ast":null,"code":"import _asyncToGenerator from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport App from './App.vue';\nimport router from './router';\nimport \"@/assets/css/table.css\";\nimport vSelect from \"vue-select\";\nimport \"vue-select/dist/vue-select.css\";\nimport SetWorkStatus from '@/assets/set_work_status.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nimport { SetValuesDiapasonInput } from '@/assets/setDiapasonToOperator.js';\nvar defaultClientType = 'novoregi';\nvar store = createStore({\n  actions: {\n    websocketConnect: function websocketConnect(ctx) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var username, class_model, url, connect_server;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                connect_server = function _connect_server() {\n                  var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                  var url = \"ws://localhost:8000/ws/chat/\".concat(username, \"/\");\n                  console.log('Starting connection to WebSocket Server');\n                  this.connection = new WebSocket(url);\n                };\n\n                username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                class_model = localStorage.getItem('user_class_model');\n\n                if (class_model == null) {\n                  class_model = defaultClientType;\n                }\n\n                url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                console.log('Starting connection to WebSocket Server');\n                _this.connection = new WebSocket(url);\n\n                _this.connection.onmessage = function (event) {\n                  var messageCatch = JSON.parse(event.data);\n\n                  if (JSON.parse(messageCatch.message).username_id !== undefined) {\n                    var operator_id = JSON.parse(messageCatch.message).username_id;\n                    document.cookie = \"username_id=\".concat(operator_id, \"; secure\");\n                    var InstanceSetWorkStatus = new SetWorkStatus(messageCatch);\n                    InstanceSetWorkStatus.setStatus();\n                    var InstanceSetBankButton = new SetBankButton();\n                    InstanceSetBankButton.setButtonStatus(messageCatch);\n                    var InstanceSetClientsModelButton = new SetClientsModelButton();\n                    InstanceSetClientsModelButton.setButtonStatus(class_model); // const InstanceSetValuesDiapasonInput = new SetValuesDiapasonInput(messageCatch)\n                    // InstanceSetValuesDiapasonInput.set()\n                  } else {\n                    var tableHeadersMessage = JSON.parse(messageCatch.message).headers;\n                    var tableBodyMessage = JSON.parse(messageCatch.message).body;\n                    console.log(tableHeadersMessage.first.lenght());\n                    console.log(tableHeadersMessage.second.lenght());\n                    console.log(tableHeadersMessage.third.lenght());\n                    console.log(tableBodyMessage.first.lenght());\n                    console.log(tableBodyMessage.second.lenght());\n                    console.log(tableBodyMessage.third.lenght());\n                    ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first);\n                    ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second);\n                    ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third);\n                    ctx.commit('updateFirstTableBody', tableBodyMessage.first);\n                    ctx.commit('updateSecondTableBody', tableBodyMessage.second);\n                    ctx.commit('updateThirdTableBody', tableBodyMessage.third);\n                  }\n                };\n\n                _this.connection.onopen = function (event) {\n                  console.log('Successfully connected to first channel websocket');\n                };\n\n                _this.connection.onclose = function (event) {\n                  console.log('Disconnect! Start connection');\n\n                  for (var i = 0; i < 3; i++) {\n                    setTimeout(function timer() {\n                      var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                      var url = \"ws://localhost:8000/ws/chat/\".concat(username, \"/\");\n                      console.log('Starting connection to WebSocket Server');\n                      this.connection = new WebSocket(url);\n                    }, i * 3000);\n                  }\n\n                  location.reload();\n                };\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    }\n  },\n  mutations: {\n    updateFirstTableHeaders: function updateFirstTableHeaders(state, firstTableHeadersMessage) {\n      state.firstTableHeadersArray = firstTableHeadersMessage;\n    },\n    updateSecondTableHeaders: function updateSecondTableHeaders(state, secondTableHeadersMessage) {\n      state.secondTableHeadersArray = secondTableHeadersMessage;\n    },\n    updateThirdTableHeaders: function updateThirdTableHeaders(state, thirdTableHeadersMessage) {\n      state.thirdTableHeadersArray = thirdTableHeadersMessage;\n    },\n    updateFirstTableBody: function updateFirstTableBody(state, firstTableBodyMessage) {\n      state.firstTableBodyArray = firstTableBodyMessage;\n    },\n    updateSecondTableBody: function updateSecondTableBody(state, secondTableBodyMessage) {\n      state.secondTableBodyArray = secondTableBodyMessage;\n    },\n    updateThirdTableBody: function updateThirdTableBody(state, thirdTableBodyMessage) {\n      state.thirdTableBodyArray = thirdTableBodyMessage;\n    }\n  },\n  state: {\n    firstTableHeadersArray: [],\n    secondTableHeadersArray: [],\n    thirdTableHeadersArray: [],\n    firstTableBodyArray: [],\n    secondTableBodyArray: [],\n    thirdTableBodyArray: []\n  },\n  getters: {\n    firstTableHeaders: function firstTableHeaders(state) {\n      return state.firstTableHeadersArray;\n    },\n    secondTableHeaders: function secondTableHeaders(state) {\n      return state.secondTableHeadersArray;\n    },\n    thirdTableHeaders: function thirdTableHeaders(state) {\n      return state.thirdTableHeadersArray;\n    },\n    firstTableBody: function firstTableBody(state) {\n      return state.firstTableBodyArray;\n    },\n    secondTableBody: function secondTableBody(state) {\n      return state.secondTableBodyArray;\n    },\n    thirdTableBody: function thirdTableBody(state) {\n      return state.thirdTableBodyArray;\n    }\n  },\n  modules: {}\n});\nvar app = createApp(App);\napp.use(vSelect);\napp.use(store);\napp.use(router);\napp.mount('#app'); // updateHeaders (state, tableHeadersMessage) {\n//     state.tableHeadersArray = tableHeadersMessage\n// },\n// updateClients (state, tableBodyMessage) {\n//     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\n//         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\n//             return 1;\n//           }\n//           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\n//             return -1;\n//           }\n//           return 0;\n//     })\n// },\n// updateDropDownCommentsArray (state, dropDownCommentsMessage) {\n//     state.dropDownCommentsArray = dropDownCommentsMessage\n// },\n// updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\n//     state.dropDownCityAlfabank = dropDownCityAlfabank\n// },","map":{"version":3,"sources":["C:/current_front/src/main.js"],"names":["createApp","createStore","GetUsernameFromCoockies","App","router","vSelect","SetWorkStatus","SetBankButton","SetClientsModelButton","SetValuesDiapasonInput","defaultClientType","store","actions","websocketConnect","ctx","connect_server","username","document","cookie","findUsernameString","url","console","log","connection","WebSocket","class_model","localStorage","getItem","onmessage","event","messageCatch","JSON","parse","data","message","username_id","undefined","operator_id","InstanceSetWorkStatus","setStatus","InstanceSetBankButton","setButtonStatus","InstanceSetClientsModelButton","tableHeadersMessage","headers","tableBodyMessage","body","first","lenght","second","third","commit","onopen","onclose","i","setTimeout","timer","location","reload","mutations","updateFirstTableHeaders","state","firstTableHeadersMessage","firstTableHeadersArray","updateSecondTableHeaders","secondTableHeadersMessage","secondTableHeadersArray","updateThirdTableHeaders","thirdTableHeadersMessage","thirdTableHeadersArray","updateFirstTableBody","firstTableBodyMessage","firstTableBodyArray","updateSecondTableBody","secondTableBodyMessage","secondTableBodyArray","updateThirdTableBody","thirdTableBodyMessage","thirdTableBodyArray","getters","firstTableHeaders","secondTableHeaders","thirdTableHeaders","firstTableBody","secondTableBody","thirdTableBody","modules","app","use","mount"],"mappings":"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","sourcesContent":["import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport \"@/assets/css/table.css\"\r\nimport vSelect from \"vue-select\";\r\nimport \"vue-select/dist/vue-select.css\";\r\n\r\nimport SetWorkStatus from '@/assets/set_work_status.js'\r\nimport SetBankButton from '@/assets/set_bank_button.js'\r\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\r\nimport { SetValuesDiapasonInput } from '@/assets/setDiapasonToOperator.js'\r\n\r\n\r\nconst defaultClientType = 'novoregi'\r\n\r\n\r\nconst store = createStore({\r\n    actions: {\r\n        async websocketConnect(ctx) {\r\n            let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n            let class_model = localStorage.getItem('user_class_model')\r\n\r\n            if (class_model == null){\r\n                class_model = defaultClientType\r\n            }\r\n\r\n            var url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n        \r\n            console.log('Starting connection to WebSocket Server')\r\n            this.connection = new WebSocket(url)\r\n\r\n            this.connection.onmessage = function (event) {\r\n                var messageCatch = JSON.parse(event.data)\r\n                \r\n                \r\n                if (JSON.parse(messageCatch.message).username_id !== undefined) {\r\n                    const operator_id = JSON.parse(messageCatch.message).username_id\r\n\r\n                    document.cookie = `username_id=${operator_id}; secure`\r\n\r\n                    const InstanceSetWorkStatus = new SetWorkStatus(messageCatch)\r\n                    InstanceSetWorkStatus.setStatus()\r\n\r\n                    const InstanceSetBankButton = new SetBankButton()\r\n                    InstanceSetBankButton.setButtonStatus(messageCatch)\r\n\r\n                    const InstanceSetClientsModelButton = new SetClientsModelButton()\r\n                    InstanceSetClientsModelButton.setButtonStatus(class_model)\r\n\r\n                    // const InstanceSetValuesDiapasonInput = new SetValuesDiapasonInput(messageCatch)\r\n                    // InstanceSetValuesDiapasonInput.set()\r\n                }\r\n                else {\r\n                    const tableHeadersMessage = JSON.parse(messageCatch.message).headers\r\n                    const tableBodyMessage = JSON.parse(messageCatch.message).body\r\n                    \r\n                    console.log(tableHeadersMessage.first.lenght())\r\n                    console.log(tableHeadersMessage.second.lenght())\r\n                    console.log(tableHeadersMessage.third.lenght())\r\n                    console.log(tableBodyMessage.first.lenght())\r\n                    console.log(tableBodyMessage.second.lenght())\r\n                    console.log(tableBodyMessage.third.lenght())\r\n        \r\n\r\n                    ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\r\n                    ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\r\n                    ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\r\n\r\n\r\n                    ctx.commit('updateFirstTableBody', tableBodyMessage.first)\r\n                    ctx.commit('updateSecondTableBody', tableBodyMessage.second)\r\n                    ctx.commit('updateThirdTableBody', tableBodyMessage.third)\r\n                }                \r\n            }\r\n            \r\n            this.connection.onopen = function (event) {\r\n                console.log('Successfully connected to first channel websocket')\r\n                }\r\n            \r\n            function connect_server() {\r\n                let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                var url = `ws://localhost:8000/ws/chat/${username}/`\r\n                console.log('Starting connection to WebSocket Server')\r\n                this.connection = new WebSocket(url);\r\n            }\r\n\r\n            this.connection.onclose = function (event) {\r\n                console.log('Disconnect! Start connection')\r\n                for (var i = 0; i < 3; i++) {\r\n                    setTimeout( function timer(){\r\n                        let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                        var url = `ws://localhost:8000/ws/chat/${username}/`\r\n                        console.log('Starting connection to WebSocket Server')\r\n                        this.connection = new WebSocket(url);\r\n                    }, i*3000 );\r\n                }\r\n                location.reload()\r\n            }\r\n        }\r\n    },\r\n    mutations: {\r\n        updateFirstTableHeaders (state, firstTableHeadersMessage) {\r\n            state.firstTableHeadersArray = firstTableHeadersMessage\r\n        },\r\n        updateSecondTableHeaders (state, secondTableHeadersMessage) {\r\n            state.secondTableHeadersArray = secondTableHeadersMessage\r\n        },\r\n        updateThirdTableHeaders (state, thirdTableHeadersMessage) {\r\n            state.thirdTableHeadersArray = thirdTableHeadersMessage\r\n        },\r\n\r\n        updateFirstTableBody (state, firstTableBodyMessage) {\r\n            state.firstTableBodyArray = firstTableBodyMessage\r\n        },\r\n        updateSecondTableBody (state, secondTableBodyMessage) {\r\n            state.secondTableBodyArray = secondTableBodyMessage\r\n        },\r\n        updateThirdTableBody (state, thirdTableBodyMessage) {\r\n            state.thirdTableBodyArray = thirdTableBodyMessage\r\n        },\r\n        \r\n    },\r\n    state: {\r\n        firstTableHeadersArray: [],\r\n        secondTableHeadersArray: [],\r\n        thirdTableHeadersArray: [],\r\n\r\n        firstTableBodyArray: [],\r\n        secondTableBodyArray: [],\r\n        thirdTableBodyArray: []\r\n\r\n    },\r\n    getters: {\r\n        firstTableHeaders(state) {\r\n            return state.firstTableHeadersArray\r\n        },\r\n        secondTableHeaders(state) {\r\n            return state.secondTableHeadersArray\r\n        },\r\n        thirdTableHeaders(state) {\r\n            return state.thirdTableHeadersArray\r\n        },\r\n\r\n\r\n        firstTableBody(state) {\r\n            return state.firstTableBodyArray\r\n        },\r\n        secondTableBody(state) {\r\n            return state.secondTableBodyArray\r\n        },\r\n        thirdTableBody(state) {\r\n            return state.thirdTableBodyArray\r\n        }\r\n    },\r\n    modules: {}\r\n})\r\n\r\nconst app = createApp(App);\r\napp.use(vSelect)\r\napp.use(store)\r\napp.use(router)\r\napp.mount('#app')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// updateHeaders (state, tableHeadersMessage) {\r\n        //     state.tableHeadersArray = tableHeadersMessage\r\n        // },\r\n// updateClients (state, tableBodyMessage) {\r\n        //     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\r\n        //         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\r\n        //             return 1;\r\n        //           }\r\n        //           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\r\n        //             return -1;\r\n        //           }\r\n        //           return 0;\r\n        //     })\r\n        // },\r\n        // updateDropDownCommentsArray (state, dropDownCommentsMessage) {\r\n        //     state.dropDownCommentsArray = dropDownCommentsMessage\r\n        // },\r\n        // updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\r\n        //     state.dropDownCityAlfabank = dropDownCityAlfabank\r\n        // },"]},"metadata":{},"sourceType":"module"}