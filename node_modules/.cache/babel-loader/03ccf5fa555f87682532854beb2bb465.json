{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _inherits from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { checkAlfabank, returnFirstColField, returnSecondColField, returnThirdColField, returnColFields } from '@/assets/configs/colConfig.js';\n\nvar MutationResponseData = /*#__PURE__*/function () {\n  function MutationResponseData(responseData) {\n    _classCallCheck(this, MutationResponseData);\n\n    this.data = responseData;\n  }\n\n  _createClass(MutationResponseData, [{\n    key: \"getBank\",\n    value: function getBank() {\n      return localStorage.getItem('bank');\n    }\n  }, {\n    key: \"returnEntry\",\n    value: function returnEntry(entry, bank_name, metaFieldsArray) {\n      var mutationEntry = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(entry); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n\n        if (metaFieldsArray.includes(key)) {\n          mutationEntry[key.replace(\"\".concat(bank_name, \"_\"), '')] = value;\n        }\n      }\n\n      return mutationEntry;\n    }\n  }, {\n    key: \"returnEntryHeaders\",\n    value: function returnEntryHeaders(entry, bank_name, metaFieldsArray) {\n      var mutationEntry = {}; // console.log(entry)\n\n      for (var _i2 = 0, _Object$entries2 = Object.entries(entry); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            key = _Object$entries2$_i[0],\n            value = _Object$entries2$_i[1];\n\n        if (metaFieldsArray.includes(entry.key)) {\n          console.log(entry.key);\n          mutationEntry[entry.key] = entry.key;\n        }\n      }\n\n      return mutationEntry;\n    }\n  }]);\n\n  return MutationResponseData;\n}();\n\nvar MutationBody = /*#__PURE__*/function (_MutationResponseData) {\n  _inherits(MutationBody, _MutationResponseData);\n\n  var _super = _createSuper(MutationBody);\n\n  function MutationBody(responseData) {\n    var _this;\n\n    _classCallCheck(this, MutationBody);\n\n    _this = _super.call(this, responseData);\n    _this.bodyData = _this.data.data.body.body;\n    return _this;\n  }\n\n  _createClass(MutationBody, [{\n    key: \"returnMutationDict\",\n    value: function returnMutationDict() {\n      var bank_name = checkAlfabank(this.getBank());\n      var metaFieldsArray = returnColFields(bank_name);\n      var resultClientsList = [];\n\n      var _iterator = _createForOfIteratorHelper(this.bodyData),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var client = _step.value;\n          var mutationClient = this.returnEntry(client, bank_name, metaFieldsArray);\n          resultClientsList.push(mutationClient);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return resultClientsList;\n    }\n  }]);\n\n  return MutationBody;\n}(MutationResponseData);\n\nvar MutationHeaders = /*#__PURE__*/function (_MutationResponseData2) {\n  _inherits(MutationHeaders, _MutationResponseData2);\n\n  var _super2 = _createSuper(MutationHeaders);\n\n  function MutationHeaders(responseData) {\n    var _this2;\n\n    _classCallCheck(this, MutationHeaders);\n\n    _this2 = _super2.call(this, responseData);\n    _this2.headersData = _this2.data.data.headers;\n    return _this2;\n  }\n\n  _createClass(MutationHeaders, [{\n    key: \"returnMutationDict\",\n    value: function returnMutationDict() {\n      // console.log(this.headersData)\n      var bank_name = checkAlfabank(this.getBank());\n      var firstFieldsArray = returnFirstColField(bank_name);\n      var secondFieldsArray = returnSecondColField(bank_name);\n      var thirdFieldsArray = returnThirdColField(bank_name);\n      var resultHeadersList = [];\n\n      var _iterator2 = _createForOfIteratorHelper(this.headersData.first),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var headers = _step2.value;\n          var mutationHeaders = this.returnEntryHeaders(headers, bank_name, firstFieldsArray); // resultHeadersList.push(mutationHeaders)\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      console.log(resultHeadersList);\n      return resultHeadersList;\n    }\n  }]);\n\n  return MutationHeaders;\n}(MutationResponseData);\n\nexport { MutationResponseData, MutationBody, MutationHeaders };","map":{"version":3,"sources":["C:/Vue-js-front-1/src/assets/mutationResponseData.js"],"names":["checkAlfabank","returnFirstColField","returnSecondColField","returnThirdColField","returnColFields","MutationResponseData","responseData","data","localStorage","getItem","entry","bank_name","metaFieldsArray","mutationEntry","Object","entries","key","value","includes","replace","console","log","MutationBody","bodyData","body","getBank","resultClientsList","client","mutationClient","returnEntry","push","MutationHeaders","headersData","headers","firstFieldsArray","secondFieldsArray","thirdFieldsArray","resultHeadersList","first","mutationHeaders","returnEntryHeaders"],"mappings":"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","sourcesContent":["import { checkAlfabank, returnFirstColField, \n    returnSecondColField, returnThirdColField, returnColFields } from '@/assets/configs/colConfig.js'\n\n\nclass MutationResponseData {\n    constructor (responseData) {\n        this.data = responseData\n    }\n\n    getBank() {\n        return localStorage.getItem('bank')\n    }\n\n    returnEntry (entry, bank_name, metaFieldsArray) {\n        let mutationEntry = {}\n\n        for (const [key, value] of Object.entries(entry)) {\n            if (metaFieldsArray.includes(key)) {\n                mutationEntry[key.replace(`${bank_name}_`, '')] = value\n            }\n        }\n        return mutationEntry\n    }\n\n    returnEntryHeaders (entry, bank_name, metaFieldsArray) {\n        let mutationEntry = {}\n        // console.log(entry)\n        for (const [key, value] of Object.entries(entry)) {\n            \n            if (metaFieldsArray.includes(entry.key)) {\n                console.log(entry.key)\n                mutationEntry[entry.key] = entry.key\n            }\n        }\n        return mutationEntry\n    }\n}\n\n\nclass MutationBody extends MutationResponseData {\n    constructor (responseData) {\n        super(responseData);\n        this.bodyData = this.data.data.body.body\n    }\n\n    returnMutationDict () {\n        let bank_name = checkAlfabank(this.getBank())\n        let metaFieldsArray = returnColFields(bank_name)\n        let resultClientsList = []\n\n        for (let client of this.bodyData) {\n            let mutationClient = this.returnEntry(client, bank_name, metaFieldsArray)\n            resultClientsList.push(mutationClient)\n        }\n        return resultClientsList\n    }\n}\n\n\nclass MutationHeaders extends MutationResponseData {\n    constructor (responseData) {\n        super(responseData);\n        this.headersData = this.data.data.headers\n    }\n\n    returnMutationDict () {\n        // console.log(this.headersData)\n        let bank_name = checkAlfabank(this.getBank())\n        let firstFieldsArray = returnFirstColField(bank_name)\n        let secondFieldsArray = returnSecondColField(bank_name)\n        let thirdFieldsArray = returnThirdColField(bank_name)\n        let resultHeadersList = []\n        for (let headers of this.headersData.first) {\n            let mutationHeaders = this.returnEntryHeaders(headers, bank_name, firstFieldsArray)\n            // resultHeadersList.push(mutationHeaders)\n        }\n        console.log(resultHeadersList)\n        return resultHeadersList\n    }\n}\n\n\nexport { MutationResponseData, MutationBody, MutationHeaders };"]},"metadata":{},"sourceType":"module"}