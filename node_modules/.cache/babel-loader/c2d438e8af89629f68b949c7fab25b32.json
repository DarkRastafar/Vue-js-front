{"ast":null,"code":"import _defineProperty from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _asyncToGenerator from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"C:/Vue-js-front-1/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _name$data$components;\n\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport bankes from '@/components/bankes.vue';\nimport rangeFilter from '@/components/rangeFilter.vue';\nimport vNotification from '@/components/v-notification.vue';\nimport { mapGetters, mapActions } from 'vuex';\nimport Paginate from \"vuejs-paginate-next\";\nimport RangeFilterClients from '@/assets/rangeFilterDiapason.js';\nimport { GetData, GetDataGte, GetDataLte } from '@/assets/FetchRequest.js';\nimport { BodyStore, HeadersStore, PaginatonStore } from '@/assets/updateStore.js';\nimport { FetchClient, FetchStatistics } from '@/assets/sendEntryesOnServer.js';\nimport { MutationBody, MutationHeaders } from '@/assets/mutationResponseData.js';\nexport default (_name$data$components = {\n  name: 'bodyTable',\n  data: function data() {\n    return {\n      clientsPerPage: 2,\n      pageNumber: 1,\n      messages: []\n    };\n  },\n  components: {\n    bankes: bankes,\n    Paginate: Paginate,\n    rangeFilter: rangeFilter,\n    vNotification: vNotification\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters([\"firstTableHeaders\", \"secondTableHeaders\", \"thirdTableHeaders\", \"tableBody\", \"additionalComments\", \"clientsTypeForOperators\", \"statisticsData\", \"paginateData\", \"clientsPerPageData\"])), {}, {\n    howClients: function howClients() {\n      return this.tableBody.length;\n    },\n    pages: function pages() {\n      return Math.ceil(this.paginateData / this.clientsPerPageData);\n    },\n    modelType: function modelType() {\n      return localStorage.getItem('user_class_model');\n    }\n  }),\n  methods: mapActions(['websocketConnect', 'setVariablesFromLocalStorage', 'getDataDRF'])\n}, _defineProperty(_name$data$components, \"methods\", {\n  UpdateScrollHeight: function UpdateScrollHeight(event) {\n    var currentTextareaField = document.getElementById(event.target.id);\n    currentTextareaField.style.cssText = \"height: \".concat((currentTextareaField, currentTextareaField.scrollHeight), \"px; overflow-y: hidden\");\n  },\n  clickPage: function clickPage(page) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      var GetDataInstance, data, BodyStoreInstance, PaginatonStoreInstance;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(page !== '...')) {\n                _context.next = 11;\n                break;\n              }\n\n              _this.pageNumber = page;\n              localStorage.setItem('currentPage', page);\n              GetDataInstance = new GetData(_this.clientsPerPageData);\n              _context.next = 6;\n              return GetDataInstance.returnSlice();\n\n            case 6:\n              data = _context.sent;\n              BodyStoreInstance = new BodyStore(data);\n              BodyStoreInstance.update(_this.$store);\n              PaginatonStoreInstance = new PaginatonStore(_this.$store, data);\n              PaginatonStoreInstance.update();\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  rangeFilterClients: function rangeFilterClients(event) {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      var ButtonId, GetDataInstance, data, BodyStoreInstance, PaginatonStoreInstance, RangeFilterClientsInstance;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              ButtonId = event.target.id;\n\n              if (ButtonId.includes('start')) {\n                localStorage.setItem('reverse', 'None');\n                GetDataInstance = new GetDataGte(_this2.clientsPerPageData);\n              } else if (ButtonId.includes('end')) {\n                localStorage.setItem('reverse', 'True');\n                GetDataInstance = new GetDataLte(_this2.clientsPerPageData);\n              } else {\n                localStorage.setItem('reverse', 'None');\n                GetDataInstance = new GetData(_this2.clientsPerPageData);\n              }\n\n              _context2.next = 4;\n              return GetDataInstance.returnSlice();\n\n            case 4:\n              data = _context2.sent;\n              BodyStoreInstance = new BodyStore(data);\n              BodyStoreInstance.update(_this2.$store);\n              PaginatonStoreInstance = new PaginatonStore(_this2.$store, data);\n              PaginatonStoreInstance.update();\n              RangeFilterClientsInstance = new RangeFilterClients(event, _this2.$store);\n              RangeFilterClientsInstance.updateStoreTableBody(_this2.tableBody);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  },\n  SendOnStatistic: function SendOnStatistic(event) {\n    var vm = this;\n\n    function callback(data) {\n      data.then(function (responseData) {\n        var clientId = event.target.id.replace('sendButton', '');\n        vm.messages.unshift({\n          name: \"\\u041A\\u043B\\u0438\\u0435\\u043D\\u0442 \\u0441 \".concat(clientId, \" ID - \\u0443\\u0441\\u043F\\u0435\\u0448\\u043D\\u043E \\u0441\\u043E\\u0445\\u0440\\u0430\\u043D\\u0435\\u043D\"),\n          id: clientId\n        });\n      });\n    }\n\n    var FetchClientInstance = new FetchClient(event);\n    FetchClientInstance.send();\n    var FetchStatisticsInstance = new FetchStatistics(event);\n    callback(FetchStatisticsInstance.send());\n  },\n  returnStrippedPhone: function returnStrippedPhone(phone_str) {\n    console.log(phone_str);\n    return phone_str.replace('=', '');\n  },\n  changeBank: function changeBank(event) {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n      var GetDataInstance, data, MutationBodyInstance, mutationClientsDict, MutationHeadersInstance, mutationHeadersDict, BodyStoreInstance, HeadersStoreInstance;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              GetDataInstance = new GetDataGte(_this3.clientsPerPageData);\n              _context3.next = 3;\n              return GetDataInstance.returnSlice();\n\n            case 3:\n              data = _context3.sent;\n              MutationBodyInstance = new MutationBody(data);\n              mutationClientsDict = MutationBodyInstance.returnMutationDict();\n              MutationHeadersInstance = new MutationHeaders(data);\n              mutationHeadersDict = MutationHeadersInstance.returnMutationDict();\n              BodyStoreInstance = new BodyStore(mutationClientsDict);\n              BodyStoreInstance.update(_this3.$store);\n              HeadersStoreInstance = new HeadersStore(mutationHeadersDict);\n              HeadersStoreInstance.update(_this3.$store);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n}), _defineProperty(_name$data$components, \"mounted\", function mounted() {\n  var _this4 = this;\n\n  return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _this4.$store.dispatch('setVariablesFromLocalStorage');\n\n            _this4.$store.dispatch('getDataDRF');\n\n            _this4.$store.dispatch('websocketConnect');\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }))();\n}), _name$data$components);","map":{"version":3,"mappings":"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","names":["bankes","rangeFilter","vNotification","mapGetters","mapActions","Paginate","RangeFilterClients","GetData","GetDataGte","GetDataLte","BodyStore","HeadersStore","PaginatonStore","FetchClient","FetchStatistics","MutationBody","MutationHeaders","name","data","clientsPerPage","pageNumber","messages","components","computed","howClients","tableBody","length","pages","Math","ceil","paginateData","clientsPerPageData","modelType","localStorage","getItem","methods","UpdateScrollHeight","event","currentTextareaField","document","getElementById","target","id","style","cssText","scrollHeight","clickPage","page","setItem","GetDataInstance","returnSlice","BodyStoreInstance","update","$store","PaginatonStoreInstance","rangeFilterClients","ButtonId","includes","RangeFilterClientsInstance","updateStoreTableBody","SendOnStatistic","vm","callback","then","clientId","replace","unshift","FetchClientInstance","send","FetchStatisticsInstance","returnStrippedPhone","phone_str","console","log","changeBank","MutationBodyInstance","mutationClientsDict","returnMutationDict","MutationHeadersInstance","mutationHeadersDict","HeadersStoreInstance","dispatch"],"sourceRoot":"","sources":["C:\\Vue-js-front-1\\src\\components\\BodyTable.vue"],"sourcesContent":["<template>\n  <bankes @changeBank=\"changeBank\"/>\n  <div class=\"container fluid customData\">\n    <vNotification :messages=\"messages\"/>\n    <div class=\"row\">\n      <div class=\"col-12 col-md-6\">\n        <rangeFilter @rangeFilterClients=\"rangeFilterClients\" @resetFilter=\"rangeFilterClients\"/>\n      </div>\n      <div class=\"col-md-6\" :class=\"{'hidden__content': modelType !== 'novoregi'}\">\n        <div class=\"col-12 col-md-12 col-sm-12 col-lg-10 col-xl-8\">\n          <div class=\"data_non_called_clients\">\n            <ul class=\"list-group\">\n              <li class=\"list-group-item d-flex justify-content-between align-items-center\" v-for=\"bank in statisticsData\" :key=\"bank.key\">{{bank.key}}:\n                <span class=\"badge badge-primary badge-pill statisticsDataSpan\">{{ bank.value }}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  \n  <div class=\"container fluid\">\n    <div class=\"row\">\n      <div class=\"col-md-8\">\n        <table class=\"table table-sm table-striped\" :name=\"Client.id\" v-for=\"Client in tableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\">\n          <thead class=\"table-dark\">\n            <tr>\n\n              <th rowspan=\"2\" :class=\"firstTableHeaders[0].key\"><p>{{ firstTableHeaders[0].value }}</p></th>\n              <th class=\"cell\" rowspan=\"2\" :name=\"`id ${Client.id}`\" :id=\"`id ${Client.id}`\">\n                {{ Client.id }}\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ secondTableHeaders[0].value }}</p></th>\n              <th class=\"cell\" :name=\"`inn ${Client.id}`\">\n                <textarea :value=\"Client.inn\" name=\"inn\" :id=\"`inn ${Client.id}`\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ thirdTableHeaders[1].value }}</p></th>\n              <th class=\"cell\" :name=\"`comment ${Client.id}`\">\n                <textarea :value=\"Client.comment\" name=\"comment\" :id=\"`comment ${Client.id}`\"/>\n              </th>\n\n            </tr>\n            <tr>\n              <th><p>{{ secondTableHeaders[1].value }}</p></th>\n              <th class=\"cell\" :name=\"`name_company ${Client.id}`\">\n                <textarea :value=\"Client.name_company\" name=\"name_company\" :id=\"`name_company ${Client.id}`\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ thirdTableHeaders[2].value }}</p></th>\n              <th class=\"cell\" :name=\"`additional_comment ${Client.id}`\">\n                <select class=\"form-select\" :id=\"`additional_comment ${Client.id}`\">\n                  <option>Доп. коммент</option>\n                  <option v-for=\"comment in additionalComments\" v-bind:key=\"comment.id\">{{comment.list}}</option>\n                </select>\n              </th>\n\n            </tr> \n            <tr>\n\n              <th :class=\"firstTableHeaders[1].key\"><p>{{ firstTableHeaders[1].value }}</p></th>\n              <th class=\"cell\" :name=\"`status_inn ${Client.id}`\">\n                <textarea :value=\"Client.status_inn\" name=\"status_inn\" :id=\"`status_inn ${Client.id}`\" readonly=\"readonly\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ secondTableHeaders[2].value }}</p></th>\n              <th class=\"cell\" :name=\"`surname ${Client.id}`\">\n                <textarea :value=\"Client.surname\" name=\"surname\" :id=\"`surname ${Client.id}`\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ thirdTableHeaders[3].value }}</p></th>\n              <th class=\"cell\" :name=\"`send_rko ${Client.id}`\">\n                <input class=\"form-check-input\" type=\"checkbox\" value=\"\" :id=\"`send_rko_checkbox ${Client.id}`\">\n                <label class=\"form-check-label\" :for=\"`send_rko_checkbox ${Client.id}`\">Отправить</label>\n              </th>\n\n            </tr>\n\n            <tr>\n\n              <th :class=\"firstTableHeaders[2].key\"><p>{{ firstTableHeaders[2].value }}</p></th>\n              <th class=\"cell\" :name=\"`bank_city ${Client.id}`\">\n                <textarea :value=\"Client.bank_city\" name=\"bank_city\" :id=\"`bank_city ${Client.id}`\"/>\n              </th>\n              <th><p>{{ secondTableHeaders[3].value }}</p></th>\n              <th class=\"cell\" :name=\"`first_name ${Client.id}`\">\n                <textarea :value=\"Client.first_name\" name=\"first_name\" :id=\"`first_name ${Client.id}`\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ thirdTableHeaders[4].value }}</p></th>\n              <th class=\"cell\" :name=\"`client_type ${Client.id}`\">\n                <select class=\"form-select\" :id=\"`client_type ${Client.id}`\">\n                  <option>Тип клиента</option>\n                  <option v-for=\"clientType in clientsTypeForOperators\" v-bind:key=\"clientType.key\" :id=\"clientType.key\">{{clientType.value}}</option>\n                </select>\n              </th>\n\n            </tr>\n\n            <tr>\n              <th :class=\"firstTableHeaders[3].key\"><p>{{ firstTableHeaders[3].value }}</p></th>\n              <th class=\"cell\" :name=\"`bank_response ${Client.id}`\">\n                <textarea :value=\"Client.bank_response\" name=\"bank_response\" :id=\"`bank_response ${Client.id}`\" readonly=\"readonly\"/>\n              </th>\n              <th><p>{{ secondTableHeaders[4].value }}</p></th>\n              <th class=\"cell\" :name=\"`patronomic ${Client.id}`\">\n                <textarea :value=\"Client.patronomic\" name=\"patronomic\" :id=\"`patronomic ${Client.id}`\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th><p>{{ thirdTableHeaders[0].value }}</p></th>\n              <th class=\"cell\" :name=\"`phone ${Client.id}`\">\n                <!-- <textarea :value=\"Client.phone\" name=\"patronomic\"/> -->\n                <!-- <textarea :value=\"returnStrippedPhone(Client.phone)\" name=\"patronomic\" :id=\"`phone ${Client.id}`\"/> -->\n                <!-- <a :href=\"`tel:${returnStrippedPhone(Client.phone)}`\" :id=\"`phone ${Client.id}`\">{{returnStrippedPhone(Client.phone)}}</a> -->\n                <a :href=\"`tel:${Client.phone}`\" :id=\"`phone ${Client.id}`\">{{Client.phone}}</a>\n              </th>\n              \n            </tr>\n\n            <tr>\n              <th :class=\"secondTableHeaders[5].key\"><p>{{ secondTableHeaders[5].value }}</p></th>\n              <th colspan=\"3\" class=\"cell\" :name=\"`adress ${Client.id}`\">\n                <textarea :value=\"Client.adress\" name=\"adress\" :id=\"`adress ${Client.id}`\"/>\n              </th>\n              <!-- ------------------------------------------------------------------ -->\n              <th colspan=\"2\" class=\"cell\">\n                <button class=\"btn btn-primary send-data\" :id=\"`sendButton ${Client.id}`\" type=\"submit\" @click=\"SendOnStatistic\">Отправить в реестр</button>\n              </th>\n            </tr>\n\n          </thead>\n        </table>\n      </div>\n    </div>\n  </div>\n  \n  <div class=\"v-table__paginator\">\n    <div class=\"row\">\n    <paginate\n      :page-count=\"pages\"\n      :page-range=\"5\"\n      :click-handler=\"clickPage\"\n      :prev-text=\"'Предыдущий'\"\n      :next-text=\"'Следующий'\"\n      :container-class=\"'v-table__paginator'\">\n    </paginate>\n    </div>\n  </div>\n</template>\n\n\n<script>\n  import bankes from '@/components/bankes.vue'\n  import rangeFilter from '@/components/rangeFilter.vue'\n  import vNotification from '@/components/v-notification.vue'\n  import { mapGetters, mapActions } from 'vuex'\n  import Paginate from \"vuejs-paginate-next\";\n  import RangeFilterClients from '@/assets/rangeFilterDiapason.js'\n  import { GetData, GetDataGte, GetDataLte } from '@/assets/FetchRequest.js'\n  import { BodyStore, HeadersStore, PaginatonStore } from '@/assets/updateStore.js'\n  import { FetchClient, FetchStatistics } from '@/assets/sendEntryesOnServer.js'\n  import { MutationBody, MutationHeaders } from '@/assets/mutationResponseData.js'\n\n  export default {\n      name: 'bodyTable',\n      data() {\n        return {\n          clientsPerPage: 2,\n          pageNumber: 1,\n          messages: []\n        }\n      },\n      components: {\n        bankes,\n        Paginate,\n        rangeFilter,\n        vNotification\n      },\n      computed: {\n        ...mapGetters([\"firstTableHeaders\", \"secondTableHeaders\", \"thirdTableHeaders\", \n        \"tableBody\", \"additionalComments\", \"clientsTypeForOperators\", \"statisticsData\", \n        \"paginateData\", \"clientsPerPageData\"]),\n\n        howClients () {\n          return this.tableBody.length\n        },\n        pages () {\n          return Math.ceil(this.paginateData / this.clientsPerPageData)\n        },\n        modelType () {\n            return localStorage.getItem('user_class_model')\n        }\n      },\n      methods: mapActions(['websocketConnect', 'setVariablesFromLocalStorage', 'getDataDRF']),\n      methods: {\n        UpdateScrollHeight (event) {\n          const currentTextareaField = document.getElementById(event.target.id);\n          currentTextareaField.style.cssText = `height: ${currentTextareaField, currentTextareaField.scrollHeight}px; overflow-y: hidden`;\n        },\n        async clickPage (page) {\n          if (page !== '...'){\n            this.pageNumber = page;\n            localStorage.setItem('currentPage', page)\n\n            const GetDataInstance = new GetData(this.clientsPerPageData)\n            let data = await GetDataInstance.returnSlice()\n\n            const BodyStoreInstance = new BodyStore(data)\n            BodyStoreInstance.update(this.$store)\n\n            const PaginatonStoreInstance = new PaginatonStore(this.$store, data)\n            PaginatonStoreInstance.update()\n          }\n        },\n        async rangeFilterClients (event) {\n          let ButtonId = event.target.id\n\n          if (ButtonId.includes('start')) {\n            localStorage.setItem('reverse', 'None')\n            var GetDataInstance = new GetDataGte(this.clientsPerPageData)\n          } \n          else if (ButtonId.includes('end')) {\n            localStorage.setItem('reverse', 'True')\n            var GetDataInstance = new GetDataLte(this.clientsPerPageData)\n          } else {\n            localStorage.setItem('reverse', 'None')\n            var GetDataInstance = new GetData(this.clientsPerPageData)\n          }\n          let data = await GetDataInstance.returnSlice()\n\n          const BodyStoreInstance = new BodyStore(data)\n          BodyStoreInstance.update(this.$store)\n\n          const PaginatonStoreInstance = new PaginatonStore(this.$store, data)\n          PaginatonStoreInstance.update()\n\n          const RangeFilterClientsInstance = new RangeFilterClients(event, this.$store)\n          RangeFilterClientsInstance.updateStoreTableBody(this.tableBody)\n        },\n        SendOnStatistic (event) {\n          let vm = this;\n          function callback (data) {\n              data.then(responseData => {\n                let clientId = (event.target.id).replace('sendButton', '')\n                vm.messages.unshift({name: `Клиент с ${clientId} ID - успешно сохранен`, id: clientId})\n              })\n          }\n\n          const FetchClientInstance = new FetchClient(event)\n          FetchClientInstance.send()\n\n          const FetchStatisticsInstance = new FetchStatistics(event)\n          callback(FetchStatisticsInstance.send())\n        },\n        returnStrippedPhone(phone_str) {\n          console.log(phone_str)\n          return phone_str.replace('=', '')\n        },\n        async changeBank (event) {\n\n          const GetDataInstance = new GetDataGte(this.clientsPerPageData)\n          let data = await GetDataInstance.returnSlice()\n\n          const MutationBodyInstance = new MutationBody(data)\n          let mutationClientsDict = MutationBodyInstance.returnMutationDict()\n\n          const MutationHeadersInstance = new MutationHeaders(data)\n          let mutationHeadersDict = MutationHeadersInstance.returnMutationDict()\n\n          const BodyStoreInstance = new BodyStore(mutationClientsDict)\n          BodyStoreInstance.update(this.$store)\n\n          const HeadersStoreInstance = new HeadersStore(mutationHeadersDict)\n          HeadersStoreInstance.update(this.$store)\n\n        }\n      },\n      async mounted() {\n        this.$store.dispatch('setVariablesFromLocalStorage');\n        this.$store.dispatch('getDataDRF');\n        this.$store.dispatch('websocketConnect');\n      }\n  }\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<!-- <table class=\"table table-sm table-striped\">\n    <thead class=\"table-dark\">\n      <tr>\n        <th v-for=\"(header, head) in allHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\n          <td v-if=\"header.value !== 'username'\">{{header.value}}</td>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr :name=\"Client.id\" v-for=\"Client in paginatedClients\" v-bind:key=\"Client.id\" :id=\"Client.id\" class=\"container-fluid\" >\n        <td v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" class=\"col\" :class=\"fieldName\" :id=\"fieldName\">\n          <div>\n            <textarea \n              v-if=\"fieldName !== 'username_id'\" :id=\"`${Client.id} ${fieldName}`\" v-bind:value=\"field\" :name=\"fieldName\" \n              @input=\"UpdateScrollHeight\" @change=\"CreateInput\"\n            />\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table> -->\n  <!-- <div class=\"v-table__paginator\">\n    <div class=\"page\" \n        v-for=\"page in displayingPages\" :key=\"page\" :class=\"{'page__selected': page === pageNumber}\" @click=\"clickPage(page)\">\n          {{ page }}\n        </div>\n  </div> -->\n\n  <!-- <div class=\"container fluid\"> -->\n    <!-- <div class=\"row\"> -->\n      <!-- <table class=\"table table-sm table-striped\">\n        <tbody>\n          <td v-for=\"Client in firstTableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\" :name=\"Client.id\">\n            <div class=\"col-md-4\">\n              <table class=\"table table-sm table-striped\">\n                <thead class=\"table-dark\">\n                  <tr v-for=\"(header, head) in firstTableHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\n                    <th>\n                      {{ header.value }}\n                    </th>\n                    <th class=\"cell\" v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" :id=\"fieldName\" :class=\"{'field__hidden': fieldName != header.key}\">\n                      <textarea v-bind:value=\"field\" :name=\"fieldName\" />\n                    </th>\n                  </tr>\n                </thead>\n              </table>\n            </div>\n          </td>\n          <td v-for=\"Client in secondTableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\" :name=\"Client.id\">\n            <div class=\"col-md-4\">\n              <table class=\"table table-sm table-striped\">\n                <thead class=\"table-dark\">\n                  <tr v-for=\"(header, head) in secondTableHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\n                    <th>\n                      {{ header.value }}\n                    </th>\n                    <th class=\"cell\" v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" :id=\"fieldName\" :class=\"{'field__hidden': fieldName != header.key}\">\n                      <textarea v-bind:value=\"field\" :name=\"fieldName\"/>\n                    </th>\n                  </tr>\n                </thead>\n              </table>\n            </div>\n          </td>\n          <td v-for=\"Client in thirdTableBody\" v-bind:key=\"Client.id\" :id=\"Client.id\" :name=\"Client.id\">\n            <div class=\"col-md-4\">\n              <table class=\"table table-sm table-striped\">\n                <thead class=\"table-dark\">\n                  <tr v-for=\"(header, head) in thirdTableHeaders\" :key=\"head\" class=\"col\" :class=\"header.key\">\n                    <th>\n                      {{ header.value }}\n                    </th>\n                    <th class=\"cell\" v-for=\"(field, fieldName) in Client\" v-bind:key=\"fieldName\" :id=\"fieldName\" :class=\"{'field__hidden': fieldName != header.key}\">\n                      <textarea v-bind:value=\"field\" :name=\"fieldName\" />\n                    </th>\n                  </tr>\n                </thead>\n              </table>\n            </div>\n          </td>\n        </tbody>\n      </table> -->\n    <!-- </div> -->\n  <!-- </div> -->\n  // paginatedClients () {\n        //   let from = (this.pageNumber -1) * this.clientsPerPage;\n        //   let to = from + this.clientsPerPage;\n        //   return this.tableBody.slice(from, to);\n        // },"]},"metadata":{},"sourceType":"module"}