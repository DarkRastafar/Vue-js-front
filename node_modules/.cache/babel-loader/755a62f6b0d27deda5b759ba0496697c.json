{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"C:/current_front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.array.iterator.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.object.assign.js\";\nimport \"C:\\\\current_front\\\\node_modules\\\\core-js\\\\modules\\\\es.promise.finally.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { createApp } from 'vue';\nimport { createStore } from 'vuex';\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js';\nimport App from './App.vue';\nimport router from './router';\nimport Paginate from \"vuejs-paginate-next\";\nimport \"@/assets/css/table.css\";\nimport vSelect from \"vue-select\";\nimport \"vue-select/dist/vue-select.css\";\nimport SetWorkStatus from '@/assets/set_work_status.js';\nimport SetBankButton from '@/assets/set_bank_button.js';\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js';\nimport { SetValuesToRangeFilter } from '@/assets/setVariablesToOperator.js';\nimport { GetData } from '@/assets/FetchRequest.js';\nvar defaultClientType = 'novoregi';\nvar defaultClientPerPage = 2;\nvar store = createStore({\n  actions: {\n    setVariablesFromLocalStorage: function setVariablesFromLocalStorage() {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var SetValuesToRangeFilterInstance;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                SetValuesToRangeFilterInstance = new SetValuesToRangeFilter();\n                SetValuesToRangeFilterInstance.set();\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    websocketConnect: function websocketConnect(ctx) {\n      var _this = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var username, class_model, url, connect_server;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                connect_server = function _connect_server() {\n                  var username = new GetUsernameFromCoockies(document.cookie).findUsernameString();\n                  var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                  console.log('Starting connection to WebSocket Server');\n                  this.connection = new WebSocket(url);\n                };\n\n                username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                class_model = localStorage.getItem('user_class_model');\n\n                if (class_model == null) {\n                  class_model = defaultClientType;\n                }\n\n                url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n                console.log('Starting connection to WebSocket Server');\n                _this.connection = new WebSocket(url);\n\n                _this.connection.onmessage = function (event) {\n                  var messageCatch = JSON.parse(event.data);\n                  var eventName = messageCatch.event;\n\n                  if (eventName == 'operator_connect') {\n                    var operator_id = JSON.parse(messageCatch.message).username_id;\n                    document.cookie = \"username_id=\".concat(operator_id, \"; secure\");\n                    localStorage.setItem('username_id', operator_id); // localStorage.setItem('clients_per_page', clients_per_page)\n\n                    var InstanceSetWorkStatus = new SetWorkStatus(messageCatch);\n                    InstanceSetWorkStatus.setStatus();\n                    var InstanceSetBankButton = new SetBankButton();\n                    InstanceSetBankButton.setButtonStatus(messageCatch);\n                    var InstanceSetClientsModelButton = new SetClientsModelButton();\n                    InstanceSetClientsModelButton.setButtonStatus(class_model);\n                    ctx.commit('updateClientsPerPageData', defaultClientPerPage);\n                  } else if (eventName == 'send_non_called_statistics') {\n                    var statisticsDataMessage = JSON.parse(messageCatch.message).statistics;\n                    ctx.commit('updateStatisticsData', statisticsDataMessage);\n                  } else if (eventName == 'client_mutation') {\n                    var mutationClient = JSON.parse(messageCatch.message).client;\n                    var mutationClientID = mutationClient.id;\n\n                    var _iterator = _createForOfIteratorHelper(ctx.getters.tableBody),\n                        _step;\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var client = _step.value;\n\n                        if (client.id == mutationClientID) {\n                          console.log(client);\n                        }\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n                  }\n                };\n\n                _this.connection.onopen = function (event) {\n                  console.log('Successfully connected to first channel websocket');\n                };\n\n                _this.connection.onclose = function (event) {\n                  console.log('Disconnect! Start connection');\n\n                  for (var i = 0; i < 3; i++) {\n                    setTimeout(function timer() {\n                      var username = new GetUsernameFromCoockies(document.cookie).returnUsername();\n                      var class_model = localStorage.getItem('user_class_model');\n                      var url = \"ws://localhost:8000/ws/\".concat(class_model, \"/\").concat(username, \"/\");\n\n                      if (class_model == null) {\n                        class_model = defaultClientType;\n                      }\n\n                      console.log('Starting connection to WebSocket Server');\n                      this.connection = new WebSocket(url);\n                    }, i * 3000);\n                  }\n\n                  location.reload();\n                };\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }))();\n    },\n    getDataDRF: function getDataDRF(ctx) {\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var GetDataInstance, responseData, paginateData, responseBody, responseHeaders, responseAdditionalComments, responseClientsTypeForOperators;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                GetDataInstance = new GetData(defaultClientPerPage);\n                _context3.next = 3;\n                return GetDataInstance.returnSlice();\n\n              case 3:\n                responseData = _context3.sent;\n                paginateData = responseData.data.body.paginate_data;\n                responseBody = responseData.data.body.body;\n                responseHeaders = responseData.data.headers;\n                responseAdditionalComments = responseData.data.additional_comments;\n                responseClientsTypeForOperators = responseData.data.clients_type_for_operators; // console.log(responseData)\n\n                ctx.commit('updateClientsPerPageData', defaultClientPerPage);\n                ctx.commit('updatePaginateData', paginateData);\n                ctx.commit('updateFirstTableHeaders', responseHeaders.first);\n                ctx.commit('updateSecondTableHeaders', responseHeaders.second);\n                ctx.commit('updateThirdTableHeaders', responseHeaders.third);\n                ctx.commit('updateTableBody', responseBody);\n                ctx.commit('updateAdditionalComments', responseAdditionalComments);\n                ctx.commit('updateClientsTypeForOperators', responseClientsTypeForOperators);\n\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))();\n    }\n  },\n  mutations: {\n    updateFirstTableHeaders: function updateFirstTableHeaders(state, firstTableHeadersMessage) {\n      state.firstTableHeadersArray = firstTableHeadersMessage;\n    },\n    updateSecondTableHeaders: function updateSecondTableHeaders(state, secondTableHeadersMessage) {\n      state.secondTableHeadersArray = secondTableHeadersMessage;\n    },\n    updateThirdTableHeaders: function updateThirdTableHeaders(state, thirdTableHeadersMessage) {\n      state.thirdTableHeadersArray = thirdTableHeadersMessage;\n    },\n    updateTableBody: function updateTableBody(state, tableBodyMessage) {\n      state.tableBodyArray = tableBodyMessage;\n    },\n    replaceItemIntoArray: function replaceItemIntoArray(state, indexItem, newItem) {\n      state.tableBodyArray;\n    },\n    updateAdditionalComments: function updateAdditionalComments(state, additionalCommentsMessage) {\n      state.additionalCommentsArray = additionalCommentsMessage;\n    },\n    updateClientsTypeForOperators: function updateClientsTypeForOperators(state, clientsTypeForOperatorsMessage) {\n      state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage;\n    },\n    updateStatisticsData: function updateStatisticsData(state, statisticsDataMessage) {\n      state.statisticsDataArray = statisticsDataMessage;\n    },\n    updatePaginateData: function updatePaginateData(state, paginateDataMessage) {\n      state.paginateDataVariable = paginateDataMessage;\n    },\n    updateClientsPerPageData: function updateClientsPerPageData(state, responseClientsPerPage) {\n      state.clientsPerPage = responseClientsPerPage;\n    }\n  },\n  state: {\n    firstTableHeadersArray: [],\n    secondTableHeadersArray: [],\n    thirdTableHeadersArray: [],\n    tableBodyArray: [],\n    additionalCommentsArray: [],\n    clientsTypeForOperatorsArray: [],\n    statisticsDataArray: [],\n    paginateDataVariable: Number(),\n    clientsPerPage: Number()\n  },\n  getters: {\n    firstTableHeaders: function firstTableHeaders(state) {\n      return state.firstTableHeadersArray;\n    },\n    secondTableHeaders: function secondTableHeaders(state) {\n      return state.secondTableHeadersArray;\n    },\n    thirdTableHeaders: function thirdTableHeaders(state) {\n      return state.thirdTableHeadersArray;\n    },\n    tableBody: function tableBody(state) {\n      return state.tableBodyArray;\n    },\n    additionalComments: function additionalComments(state) {\n      return state.additionalCommentsArray;\n    },\n    clientsTypeForOperators: function clientsTypeForOperators(state) {\n      return state.clientsTypeForOperatorsArray;\n    },\n    statisticsData: function statisticsData(state) {\n      return state.statisticsDataArray;\n    },\n    paginateData: function paginateData(state) {\n      return state.paginateDataVariable;\n    },\n    clientsPerPageData: function clientsPerPageData(state) {\n      return state.clientsPerPage;\n    }\n  },\n  modules: {}\n});\nvar app = createApp(App);\napp.use(vSelect);\napp.use(store);\napp.use(router);\napp.use(Paginate);\napp.mount('#app'); // updateHeaders (state, tableHeadersMessage) {\n//     state.tableHeadersArray = tableHeadersMessage\n// },\n// updateClients (state, tableBodyMessage) {\n//     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\n//         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\n//             return 1;\n//           }\n//           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\n//             return -1;\n//           }\n//           return 0;\n//     })\n// },\n// updateDropDownCommentsArray (state, dropDownCommentsMessage) {\n//     state.dropDownCommentsArray = dropDownCommentsMessage\n// },\n// updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\n//     state.dropDownCityAlfabank = dropDownCityAlfabank\n// },\n// else if (JSON.parse(messageCatch.message).headers !== undefined) {\n//     const tableHeadersMessage = JSON.parse(messageCatch.message).headers\n//     const tableBodyMessage = JSON.parse(messageCatch.message).body.body\n//     const additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments\n//     const clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators\n//     ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\n//     ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\n//     ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\n//     ctx.commit('updateTableBody', tableBodyMessage)\n//     ctx.commit('updateAdditionalComments', additionalCommentsMessage)\n//     ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage)\n// }","map":{"version":3,"sources":["C:/current_front/src/main.js"],"names":["createApp","createStore","GetUsernameFromCoockies","App","router","Paginate","vSelect","SetWorkStatus","SetBankButton","SetClientsModelButton","SetValuesToRangeFilter","GetData","defaultClientType","defaultClientPerPage","store","actions","setVariablesFromLocalStorage","SetValuesToRangeFilterInstance","set","websocketConnect","ctx","connect_server","username","document","cookie","findUsernameString","url","class_model","console","log","connection","WebSocket","returnUsername","localStorage","getItem","onmessage","event","messageCatch","JSON","parse","data","eventName","operator_id","message","username_id","setItem","InstanceSetWorkStatus","setStatus","InstanceSetBankButton","setButtonStatus","InstanceSetClientsModelButton","commit","statisticsDataMessage","statistics","mutationClient","client","mutationClientID","id","getters","tableBody","onopen","onclose","i","setTimeout","timer","location","reload","getDataDRF","GetDataInstance","returnSlice","responseData","paginateData","body","paginate_data","responseBody","responseHeaders","headers","responseAdditionalComments","additional_comments","responseClientsTypeForOperators","clients_type_for_operators","first","second","third","mutations","updateFirstTableHeaders","state","firstTableHeadersMessage","firstTableHeadersArray","updateSecondTableHeaders","secondTableHeadersMessage","secondTableHeadersArray","updateThirdTableHeaders","thirdTableHeadersMessage","thirdTableHeadersArray","updateTableBody","tableBodyMessage","tableBodyArray","replaceItemIntoArray","indexItem","newItem","updateAdditionalComments","additionalCommentsMessage","additionalCommentsArray","updateClientsTypeForOperators","clientsTypeForOperatorsMessage","clientsTypeForOperatorsArray","updateStatisticsData","statisticsDataArray","updatePaginateData","paginateDataMessage","paginateDataVariable","updateClientsPerPageData","responseClientsPerPage","clientsPerPage","Number","firstTableHeaders","secondTableHeaders","thirdTableHeaders","additionalComments","clientsTypeForOperators","statisticsData","clientsPerPageData","modules","app","use","mount"],"mappings":"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","sourcesContent":["import { createApp } from 'vue'\r\nimport { createStore } from 'vuex'\r\nimport { GetUsernameFromCoockies } from '@/assets/get_username_from_cookies.js'\r\nimport App from './App.vue'\r\nimport router from './router'\r\nimport Paginate from \"vuejs-paginate-next\";\r\nimport \"@/assets/css/table.css\"\r\nimport vSelect from \"vue-select\";\r\nimport \"vue-select/dist/vue-select.css\";\r\n\r\nimport SetWorkStatus from '@/assets/set_work_status.js'\r\nimport SetBankButton from '@/assets/set_bank_button.js'\r\nimport SetClientsModelButton from '@/assets/setClientsModelButton.js'\r\nimport { SetValuesToRangeFilter } from '@/assets/setVariablesToOperator.js'\r\nimport { GetData } from '@/assets/FetchRequest.js'\r\n\r\n\r\nconst defaultClientType = 'novoregi'\r\nconst defaultClientPerPage = 2\r\n\r\n\r\nconst store = createStore({\r\n    actions: {\r\n        async setVariablesFromLocalStorage() {\r\n            const SetValuesToRangeFilterInstance = new SetValuesToRangeFilter()\r\n            SetValuesToRangeFilterInstance.set()\r\n        },\r\n        async websocketConnect(ctx) {\r\n            let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\r\n            let class_model = localStorage.getItem('user_class_model')\r\n\r\n            if (class_model == null){\r\n                class_model = defaultClientType\r\n            }\r\n            \r\n            let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n        \r\n            console.log('Starting connection to WebSocket Server')\r\n            this.connection = new WebSocket(url)\r\n\r\n\r\n            this.connection.onmessage = function (event) {\r\n                let messageCatch = JSON.parse(event.data)\r\n                let eventName = messageCatch.event\r\n\r\n                if (eventName == 'operator_connect') {\r\n                    const operator_id = JSON.parse(messageCatch.message).username_id\r\n\r\n                    document.cookie = `username_id=${operator_id}; secure`\r\n                    localStorage.setItem('username_id', operator_id)\r\n                    // localStorage.setItem('clients_per_page', clients_per_page)\r\n\r\n                    const InstanceSetWorkStatus = new SetWorkStatus(messageCatch)\r\n                    InstanceSetWorkStatus.setStatus()\r\n\r\n                    const InstanceSetBankButton = new SetBankButton()\r\n                    InstanceSetBankButton.setButtonStatus(messageCatch)\r\n\r\n                    const InstanceSetClientsModelButton = new SetClientsModelButton()\r\n                    InstanceSetClientsModelButton.setButtonStatus(class_model)\r\n\r\n                    \r\n                    ctx.commit('updateClientsPerPageData', defaultClientPerPage)\r\n                }\r\n                else if (eventName == 'send_non_called_statistics') {\r\n                    const statisticsDataMessage = JSON.parse(messageCatch.message).statistics\r\n                    ctx.commit('updateStatisticsData', statisticsDataMessage)\r\n                }\r\n                else if (eventName == 'client_mutation') {\r\n                    let mutationClient = JSON.parse(messageCatch.message).client\r\n                    let mutationClientID = mutationClient.id\r\n                    for (let client of ctx.getters.tableBody) {\r\n                        if (client.id == mutationClientID) {\r\n                            console.log(client)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            this.connection.onopen = function (event) {\r\n                console.log('Successfully connected to first channel websocket')\r\n                }\r\n            \r\n            function connect_server() {\r\n                let username = new GetUsernameFromCoockies(document.cookie).findUsernameString ()\r\n                let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n                console.log('Starting connection to WebSocket Server')\r\n                this.connection = new WebSocket(url);\r\n            }\r\n\r\n            this.connection.onclose = function (event) {\r\n                console.log('Disconnect! Start connection')\r\n                for (var i = 0; i < 3; i++) {\r\n                    setTimeout( function timer(){\r\n                        let username = new GetUsernameFromCoockies(document.cookie).returnUsername()\r\n                        let class_model = localStorage.getItem('user_class_model')\r\n                        let url = `ws://localhost:8000/ws/${class_model}/${username}/`\r\n\r\n                        if (class_model == null){\r\n                            class_model = defaultClientType\r\n                        }\r\n\r\n                        console.log('Starting connection to WebSocket Server')\r\n                        this.connection = new WebSocket(url);\r\n                    }, i*3000 );\r\n                }\r\n                location.reload()\r\n            }\r\n        },\r\n        async getDataDRF(ctx) {\r\n            const GetDataInstance = new GetData(defaultClientPerPage)\r\n            let responseData = await GetDataInstance.returnSlice()\r\n            let paginateData = responseData.data.body.paginate_data\r\n            let responseBody = responseData.data.body.body\r\n            let responseHeaders = responseData.data.headers\r\n            let responseAdditionalComments = responseData.data.additional_comments\r\n            let responseClientsTypeForOperators = responseData.data.clients_type_for_operators\r\n\r\n            // console.log(responseData)\r\n            \r\n            ctx.commit('updateClientsPerPageData', defaultClientPerPage)\r\n            ctx.commit('updatePaginateData', paginateData)\r\n            ctx.commit('updateFirstTableHeaders', responseHeaders.first)\r\n            ctx.commit('updateSecondTableHeaders', responseHeaders.second)\r\n            ctx.commit('updateThirdTableHeaders', responseHeaders.third)\r\n            ctx.commit('updateTableBody', responseBody)\r\n            ctx.commit('updateAdditionalComments', responseAdditionalComments)\r\n            ctx.commit('updateClientsTypeForOperators', responseClientsTypeForOperators)\r\n        },\r\n    },\r\n    mutations: {\r\n        updateFirstTableHeaders (state, firstTableHeadersMessage) {\r\n            state.firstTableHeadersArray = firstTableHeadersMessage\r\n            \r\n        },\r\n        updateSecondTableHeaders (state, secondTableHeadersMessage) {\r\n            state.secondTableHeadersArray = secondTableHeadersMessage\r\n        },\r\n        updateThirdTableHeaders (state, thirdTableHeadersMessage) {\r\n            state.thirdTableHeadersArray = thirdTableHeadersMessage\r\n        },\r\n\r\n        updateTableBody (state, tableBodyMessage) {\r\n            state.tableBodyArray = tableBodyMessage\r\n        },\r\n        replaceItemIntoArray (state, indexItem, newItem) {\r\n            state.tableBodyArray\r\n        },\r\n\r\n        updateAdditionalComments (state, additionalCommentsMessage) {\r\n            state.additionalCommentsArray = additionalCommentsMessage\r\n        },\r\n        updateClientsTypeForOperators (state, clientsTypeForOperatorsMessage) {\r\n            state.clientsTypeForOperatorsArray = clientsTypeForOperatorsMessage\r\n        },\r\n\r\n        updateStatisticsData (state, statisticsDataMessage) {\r\n            state.statisticsDataArray = statisticsDataMessage\r\n        },\r\n\r\n        updatePaginateData (state, paginateDataMessage) {\r\n            state.paginateDataVariable = paginateDataMessage\r\n        },\r\n\r\n        updateClientsPerPageData (state, responseClientsPerPage) {\r\n            state.clientsPerPage = responseClientsPerPage\r\n        }\r\n        \r\n    },\r\n    state: {\r\n        firstTableHeadersArray: [],\r\n        secondTableHeadersArray: [],\r\n        thirdTableHeadersArray: [],\r\n        tableBodyArray: [],\r\n        additionalCommentsArray: [],\r\n        clientsTypeForOperatorsArray: [],\r\n        statisticsDataArray: [],\r\n        paginateDataVariable: Number(),\r\n        clientsPerPage: Number()\r\n    },\r\n    getters: {\r\n        firstTableHeaders(state) {\r\n            return state.firstTableHeadersArray\r\n        },\r\n        secondTableHeaders(state) {\r\n            return state.secondTableHeadersArray\r\n        },\r\n        thirdTableHeaders(state) {\r\n            return state.thirdTableHeadersArray\r\n        },\r\n\r\n        tableBody(state) {\r\n            return state.tableBodyArray\r\n        },\r\n\r\n        additionalComments(state) {\r\n            return state.additionalCommentsArray\r\n        },\r\n        clientsTypeForOperators(state) {\r\n            return state.clientsTypeForOperatorsArray\r\n        },\r\n        statisticsData(state) {\r\n            return state.statisticsDataArray\r\n        },\r\n        paginateData(state) {\r\n            return state.paginateDataVariable\r\n        },\r\n        clientsPerPageData(state) {\r\n            return state.clientsPerPage\r\n        }\r\n\r\n    },\r\n    modules: {}\r\n})\r\n\r\n\r\nconst app = createApp(App);\r\napp.use(vSelect)\r\napp.use(store)\r\napp.use(router)\r\napp.use(Paginate)\r\napp.mount('#app')\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// updateHeaders (state, tableHeadersMessage) {\r\n        //     state.tableHeadersArray = tableHeadersMessage\r\n        // },\r\n// updateClients (state, tableBodyMessage) {\r\n        //     state.tableBodyArray = tableBodyMessage.sort(function (a, b) {\r\n        //         if (parseFloat(a.scoring_time) > parseFloat(b.scoring_time)) {\r\n        //             return 1;\r\n        //           }\r\n        //           if (parseFloat(a.scoring_time) < parseFloat(b.scoring_time)) {\r\n        //             return -1;\r\n        //           }\r\n        //           return 0;\r\n        //     })\r\n        // },\r\n        // updateDropDownCommentsArray (state, dropDownCommentsMessage) {\r\n        //     state.dropDownCommentsArray = dropDownCommentsMessage\r\n        // },\r\n        // updateDropDownCityAlfabank (state, dropDownCityAlfabank) {\r\n        //     state.dropDownCityAlfabank = dropDownCityAlfabank\r\n        // },\r\n        \r\n                // else if (JSON.parse(messageCatch.message).headers !== undefined) {\r\n                //     const tableHeadersMessage = JSON.parse(messageCatch.message).headers\r\n                //     const tableBodyMessage = JSON.parse(messageCatch.message).body.body\r\n                //     const additionalCommentsMessage = JSON.parse(messageCatch.message).additional_comments\r\n                //     const clientsTypeForOperatorsMessage = JSON.parse(messageCatch.message).clients_type_for_operators\r\n\r\n                //     ctx.commit('updateFirstTableHeaders', tableHeadersMessage.first)\r\n                //     ctx.commit('updateSecondTableHeaders', tableHeadersMessage.second)\r\n                //     ctx.commit('updateThirdTableHeaders', tableHeadersMessage.third)\r\n                //     ctx.commit('updateTableBody', tableBodyMessage)\r\n                //     ctx.commit('updateAdditionalComments', additionalCommentsMessage)\r\n                //     ctx.commit('updateClientsTypeForOperators', clientsTypeForOperatorsMessage)\r\n                // }"]},"metadata":{},"sourceType":"module"}